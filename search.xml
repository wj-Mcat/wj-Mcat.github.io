[{"title":"大模型推理能力","url":"https://wj-mcat.github.io/2025/02/11/nlp/reasoning/01-introduction/","content":"<h2 id=\"大模型推理能力\">大模型推理能力</h2>\n<p>大模型的推理能力是能够在复杂任务中进行高效、准确的预测和决策，通常是 think step by step 的方式，这个也是符合 <a href=\"https://zh.wikipedia.org/zh-tw/%E5%BF%AB%E6%80%9D%E6%85%A2%E6%83%B3\">System 2</a>，在给出最终答案之前，会经过一系列的推理过程，实践证明这种方式可以得到更准确的答案。</p>\n<p>为了得到更好的推理能力，需要通过深入的逻辑分析，进而得出新的结论、判断或预测的能力，以下是具体介绍：</p>\n<ul>\n<li><strong>逻辑推理能力</strong>\n<ul>\n<li><strong>演绎推理</strong>：大模型能够从一般的规则和前提推导出特定的结论。例如，在给定“所有的偶数都能被2整除”以及“8是一个偶数”这两个前提时，大模型可以正确推导出“8能被2整除”的结论。</li>\n<li><strong>归纳推理</strong>：从具体的事例中总结出一般性的规律或结论。例如，大模型在分析了大量的鸟类会飞的例子，以及少数不会飞的鸟类（如鸵鸟、企鹅）后，能够归纳出“大多数鸟类会飞，但存在一些特殊鸟类不会飞”的一般性结论。</li>\n<li><strong>因果推理</strong>：大模型可以分析事件之间的因果关系。比如，当输入“长期大量吸烟”和“患肺癌的几率增加”等相关信息时，模型能够理解吸烟是导致患肺癌几率增加的一个原因，而不是仅仅将它们看作两个独立的事件。</li>\n</ul>\n</li>\n<li><strong>知识推理能力</strong>\n<ul>\n<li><strong>常识推理</strong>：大模型需要具备对日常生活中常见的、普遍被认可的知识进行推理的能力。如知道“太阳从东方升起”“水在常温下是液态”等常识，并能基于这些常识进行推理。当被问到“早上起来看到太阳在东边，这是为什么”时，能够根据地球自转等相关知识进行解释。</li>\n<li><strong>专业知识推理</strong>：在特定的专业领域，如医学、法律、科学等，大模型要能够运用专业知识进行推理。以医学为例，当输入患者的症状、检查结果等信息时，模型能够依据医学知识推理出可能的疾病诊断和治疗方案。</li>\n</ul>\n</li>\n</ul>\n<p>大模型的推理能力是其智能水平的重要体现，使其能够更好地理解和处理各种复杂的任务，为用户提供更准确、有用的信息和建议。</p>\n","categories":["nlp","reasoning"],"tags":["llm","reasoning","推理能力"]},{"title":"认知复利","url":"https://wj-mcat.github.io/2025/01/21/thoughts/认知复利/","content":"<p>突然看到这个词，觉得对于内容输出型的人来说还挺有价值的，简单说下自己的理解。</p>\n<h2 id=\"什么是认知复利\">什么是认知复利</h2>\n<p>当你想长期从事一个技术性很强的领域时，你个人的认知通常会随着你的不断输入而得到提高。认知复利强调通过持续学习、积累知识和不断更新认知，使个人的认知能力想复利指数一样增长。</p>\n<p>假如你每天进步 1%，那么 1 年后你将提高 37.8%，这是一个非常惊人的数字。</p>\n<p>对于一个从事专业领域的大 V 来说，这个通常是一个必备的技能，你需要持续不断的输出看起来很厉害的内容（重点放在深度，同时还需要兼顾一定广度），然后积累粉丝量。</p>\n<h2 id=\"认知复利对于个人的影响\">认知复利对于个人的影响</h2>\n<ol>\n<li>知识的积累与整合</li>\n</ol>\n<p>当一个人长期坚持复利成长，其储备的知识必然会不断累积整合，最终形成自己的知识体系。</p>\n<p>这种知识体系具备一定的深度和广度，扩充知识体系和个人能力边界，为个人在职场和生活中提供更多的可能性。</p>\n<ol start=\"2\">\n<li>经验的复利效应</li>\n</ol>\n<p>学习也是一样，当你有了自己的学习方法，并坚持下去，这个方法会让你很轻松的应对新的知识点，能够更轻松的上手。</p>\n<p>我们很多时候也是需要学习如何去学习，并打磨好自己的学习方法，这样你的学习效率会大大提高，从而实现复利增长。</p>\n<ol start=\"3\">\n<li>时间的力量</li>\n</ol>\n<p>当你尝到了认知复利的甜头之后，就会认识到时间的重要性，也可以说坚持的重要性，只有经过了时间的考验，你的认知才会有一个质的飞跃。</p>\n<ol start=\"4\">\n<li>职业和个人成长的正向循环</li>\n</ol>\n<p>对于任何人来说，认知的提升都会带来职业和个人成长的正向反馈，如果一个这个反馈能够让你有持续提升的动力，这个时候就会进入一个正向循环中，让你有源源不断的动力去学习并提升。</p>\n<h2 id=\"作为一个技术型人，如何实现认知复利\">作为一个技术型人，如何实现认知复利</h2>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">实现认知复利需要系统化的方法和长期的坚持。以下是一些具体的操作步骤和策略，帮助你通过持续学习和实践实现认知复利：\n<span class=\"token list punctuation\">1.</span> 明确目标与方向\n确定学习领域：选择一个或几个你感兴趣且有潜力的领域，比如编程、数据分析、人工智能、商业管理等。明确目标可以帮助你集中精力，避免盲目学习。\n设定长期目标：例如，成为一名高级工程师、行业专家或技术领导者。长期目标能为你提供持续的动力。\n分解短期目标：将长期目标分解为短期可执行的任务，比如每周学习一个新技能或阅读一本专业书籍。\n<span class=\"token list punctuation\">2.</span> 持续学习与知识积累\n系统化学习：选择高质量的学习资源，如专业书籍、在线课程（如Coursera、edX、Udacity）、行业认证（如AWS认证、PMP等）。系统化学习可以帮助你构建坚实的知识基础。\n跨领域学习：不要局限于单一领域，尝试学习相关或跨领域的知识。例如，技术人员可以学习一些商业管理知识，以更好地理解市场需求。\n每日学习：养成每天学习的习惯，哪怕只有30分钟。持续的输入是实现认知复利的关键。\n<span class=\"token list punctuation\">3.</span> 实践与应用\n动手实践：知识只有通过实践才能转化为能力。例如，学习编程时，通过实际项目来应用所学知识；学习数据分析时，尝试分析真实数据集。\n参与项目：无论是工作中的项目还是个人兴趣项目，实践都是提升认知的有效方式。可以参与开源项目、实习或自己发起的项目。\n解决实际问题：遇到问题时，不要急于求助，先尝试自己解决。解决问题的过程会加深你的理解和记忆。\n<span class=\"token list punctuation\">4.</span> 思考与总结\n反思与复盘：定期回顾自己的学习和实践过程，总结经验教训。例如，每周或每月进行一次复盘，思考哪些地方做得好，哪些需要改进。\n写笔记和总结：通过写作整理思路，加深对知识的理解。可以写技术博客、读书笔记或项目总结。\n建立知识体系：将所学知识进行分类和整理，形成自己的知识体系。例如，用思维导图或笔记软件（如Notion）来管理知识。\n<span class=\"token list punctuation\">5.</span> 交流与反馈\n加入学习社区：加入相关的学习小组、论坛或社交媒体群组，与其他学习者交流经验。例如，GitHub、Stack Overflow、知乎等平台。\n与专家交流：通过参加行业会议、研讨会或网络研讨会，与领域专家交流。他们的经验和见解可以为你提供新的视角。\n接受反馈：在实践和学习过程中，主动寻求他人的反馈，并根据反馈调整自己的学习方法和实践方式。\n<span class=\"token list punctuation\">6.</span> 保持好奇心与开放心态\n保持好奇心：对新事物保持好奇心，主动探索未知领域。好奇心是驱动学习的重要动力。\n开放心态：接受新观点和新方法，避免陷入思维定式。开放心态可以帮助你从不同角度思考问题。\n适应变化：技术和社会环境不断变化，保持适应性是实现认知复利的关键。\n<span class=\"token list punctuation\">7.</span> 利用时间的力量\n长期坚持：认知复利需要时间积累，不要期望一蹴而就。坚持学习和实践，随着时间推移，你会看到显著的进步。\n耐心与毅力：在学习过程中，可能会遇到挫折和困难，保持耐心和毅力是实现认知复利的重要品质。\n<span class=\"token list punctuation\">8.</span> 优化学习方法\n主动学习：主动寻找问题并解决问题，而不是被动接受知识。例如，通过项目驱动学习，主动探索知识。\n深度学习：深入理解知识的本质，而不仅仅是表面记忆。例如，学习算法时，不仅要记住代码，还要理解其原理和应用场景。\n多样化学习：结合多种学习方式，如阅读、观看视频、参加课程、实践等。多样化学习可以提高学习效率。\n<span class=\"token list punctuation\">9.</span> 健康的生活方式\n保持健康：良好的身体状态是高效学习的基础。保持规律的作息、适量运动和健康饮食。\n管理压力：学习和工作过程中难免会遇到压力，学会管理压力，保持心态平和。\n具体案例\n假设你想成为一名人工智能工程师：\n明确目标：成为一名能够独立开发AI项目的工程师。\n系统学习：学习Python编程、机器学习基础、深度学习框架（如TensorFlow或PyTorch）。\n实践项目：从简单的项目开始，如图像识别或文本分类，逐步提升难度。\n总结经验：每次项目后，总结遇到的问题和解决方案，优化知识体系。\n交流反馈：加入AI社区，与其他开发者交流，参加技术会议，获取反馈。\n持续学习：关注AI领域的最新研究和技术动态，不断更新知识。\n通过以上方法，你可以在技术领域逐步实现认知复利，最终实现个人的快速成长和职业发展。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","categories":["thoughts"],"tags":["thought","life-long-learning"]},{"title":"Qwen Math PRM","url":"https://wj-mcat.github.io/2025/01/20/nlp/qwen-math-prm/","content":"<h2 id=\"PRM-的难点\">PRM 的难点</h2>\n<ul>\n<li>数据标注</li>\n<li>效果评估</li>\n</ul>\n","categories":["nlp"],"tags":[]},{"title":"Natural Language Reinforcement Learning","url":"https://wj-mcat.github.io/2025/01/02/nlp/natural-language-reinforcement-learning/","content":"<h2 id=\"介绍\">介绍</h2>\n<p>什么是 Natural Language Reinforcement Learning 呢？</p>\n<p>顾名思义，其实就是自然语言和强化学习的结合，在 NLRL 方法中的核心组件都被定义为自然语言，比如：Strategy、Goal、Evaluation 等方法，在高水平的指令理解能力下，只需要编写简单的 Prompt 即可实现复杂的决策、动作空间挖掘等复杂的强化学习功能。</p>\n<p>强化学习通常会将问题构建成数学模型来教机器来学习，其中可使用马尔可夫决策过程（Markov Decision Process）来模拟并学习事物背后的原理，这种方法在游戏和机器人领域取得了非常惊人的进展。</p>\n","categories":["nlp"],"tags":[]},{"title":"如何有效表达","url":"https://wj-mcat.github.io/2024/09/07/thoughts/how-to-speak/","content":"<p>个人认为，学会有效表达以及幽默表达是个人幸福感提升的重要一环，这个能减少你成长过程中的一部分痛苦。</p>\n<p>至少我是这么认为的，不知道大家如何看待。</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>这篇文章应该会一直维护的，记录我在个人成长过程中的思考、总结以及成长的记录。</p>\n</blockquote>\n<h2 id=\"表达力培训\">表达力培训</h2>\n<p>2024 年 9.7和 9.8 号这两天参加了黄执中老师的表达培训课程，以下是我在课程学习过程中的原始笔记，先记录在此。</p>\n<h3 id=\"9-7-号培训笔记\">9.7 号培训笔记</h3>\n<ul>\n<li>【核心观点】生成有价值的内容\n<ul>\n<li>通过故事的方式来表达\n<ul>\n<li>为什么要听故事：更容易让人接受并记忆</li>\n<li>如何将故事更好的表达出来【通过写作反复练习】\n<ul>\n<li>筛选材料 -&gt; 组装材料 -&gt; 幽默的表达出\n<ul>\n<li>筛选材料依赖于自己的记忆力、阅读量。</li>\n<li>组装材料依赖于说话框架以及对材料的理解能力。</li>\n<li>幽默的表达依赖于肢体语言、情绪感染力。</li>\n</ul>\n</li>\n<li>口才表达的提升是一个长期的过程，可以在生活中刻意关注，进而可以提高。</li>\n</ul>\n</li>\n<li>[疑问] 专业知识如何用故事表达出来\n<ul>\n<li>纯技术类型的可以template 的方式</li>\n<li>心得培训的文章可以用故事的方式来写出来。</li>\n</ul>\n</li>\n<li>[疑问] 需求沟通过程中如何用故事来缓解核心矛盾和问题</li>\n</ul>\n</li>\n<li>故事就是通俗内容的差异化装置\n<ul>\n<li>核心的差异化就是：素材\n<ul>\n<li>多搜集一些古人的故事</li>\n<li>多搜集一些周围的故事</li>\n</ul>\n</li>\n<li>故事有很多钩子，所以我们需要考虑如何去构建这些钩子</li>\n</ul>\n</li>\n<li>能够说故事不要说道理\n<ul>\n<li>故事背后蕴含着一定的道理</li>\n<li>道理通常是通过故事来传播的：人最能够通过故事来学习、感受</li>\n</ul>\n</li>\n<li>任何表里不一的东西背后都是故事\n<ul>\n<li>我曾经对身高很敏感</li>\n<li>我曾经对说话很恐惧</li>\n<li>我曾经很喜欢出去浪</li>\n<li>我总是喜欢做计划，然后一直在做计划，从来没有执行过【执行力差】</li>\n<li>我曾经很喜欢跑步，游泳</li>\n</ul>\n</li>\n<li>学习一个新知识点，如何融会贯通呢？\n<ul>\n<li>那我需要不断地尝试去学习讲故事，在讲的过程中我也会思考如何可以把故事讲的生动有趣。</li>\n<li>形式\n<ul>\n<li>博客、生活中的有趣事情、跟同事讲故事</li>\n<li>多读书、多读故事、多跟家里人讲故事</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>梁秋阳老师思辨表达课：多读书，多思考，多写作，才会更有故事感的表达\n<ul>\n<li>如何将自己的简短清晰的表达清楚</li>\n<li>表达的清晰来自于差异：\n<ul>\n<li>差异才能够让人更容易得理解</li>\n<li>差异才能够引发人的兴趣</li>\n</ul>\n</li>\n<li>如何表达的更有差异性呢？\n<ul>\n<li>说话模板：我是 xxx 而不是 yyy</li>\n<li>说话的时候需要有转折，反转</li>\n</ul>\n</li>\n<li>【有趣的观点】我的客户就是我的老板</li>\n<li>观点的深入来自于差别，差异</li>\n<li>差异性来自于哪里呢？\n<ul>\n<li>多读书、多表达、都沟通</li>\n</ul>\n</li>\n<li>松弛感是集中不是涣散</li>\n</ul>\n</li>\n<li>胡jianbiao：有效演讲\n<ul>\n<li>演讲的本质：在特定的时间内，以表达改变听者\n<ul>\n<li>针对于不同的人，知道以何种方式可以改变他们：说法、内容</li>\n</ul>\n</li>\n<li>收集“对”的观点\n<ul>\n<li>通过搜集这些观点，在沟通的时候给予输出</li>\n</ul>\n</li>\n<li>整理内心秩序：我自己是这么想的。</li>\n<li>【重点】观众要怎么想，才会选择站到我这边来\n<ul>\n<li>观点：站在对方的角度来思考如何说服</li>\n</ul>\n</li>\n<li>人是如何做决策的\n<ul>\n<li>决策动机</li>\n<li>决策机理\n<ul>\n<li>应该做、值得做、想要做</li>\n<li>貌似是同样的行动，实则是不同的行动</li>\n</ul>\n</li>\n<li>【重点】怎么找到能激发行动选择的观点\n<ul>\n<li>选择你的决策机理</li>\n<li>倒推演绎现状认知</li>\n</ul>\n</li>\n<li>说服人的时候：不要说服他们不要什么，而是说服他们要什么</li>\n<li>例子：\n<ul>\n<li>如果你想要身体健康，就应该注意饮食，锻炼身体</li>\n<li>我们应该xxx，而不是 yyy，所以你需要 zzz</li>\n</ul>\n</li>\n<li>老板不 care 主管身上有没有八卦，但不接受他树敌太多</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"9-8-号培训笔记\">9.8 号培训笔记</h3>\n<ul>\n<li>\n<p>所谓说服：一种非强迫的方式就能产生改变的力量</p>\n<ul>\n<li>需要通过对方自身相关的事情进行沟通，让他感受到利弊，才能更容易来说服</li>\n<li>通过讲故事、自我感受、自我思考等流程进行说服</li>\n<li>我需要，而不是你应该：换一种说法，解决事情的效率会更高</li>\n<li>对问题进行深挖，使用：为什么要xxx 的句式来深入了解。\n<ul>\n<li>要找准对方可能会被说服的多种理由：这种是每次尝试说服之前需要思考的。</li>\n<li>找准一个对对方很重要的理由：难点</li>\n</ul>\n</li>\n<li>一个人不会为了别人的理由而改变\n<ul>\n<li>需要深入到内心中的每个细节，关注所有可能会包含核心问题的子问题继续问下去\n<ul>\n<li>认真思考别人的每一个细节，并尝试寻找每一个可以突破的点\n<ul>\n<li>感觉需要很强的临场反应能力，能够快速理解别人的背后各种因素，进而尝试从一个点进行突破。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>一切的说服本质上都是自我说服：用不断深入引导的方式找到对方可能会改变的点，然后让对方自己来说服自己。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>公众表达</p>\n<ul>\n<li>个人的表达呈现的是他脑子里的状态</li>\n<li>一个好的学习通常建立在：好的问题 基础上。\n<ul>\n<li>这也说明了 <code>think todo-list</code> 的重要性。</li>\n</ul>\n</li>\n<li>如何提出 <code>好问题</code>?\n<ul>\n<li>[重点] 问题一定要具体，能量化\n<ul>\n<li>不要大词，不谈大道理，不迷恋大问题</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>表达方式会限制你的思考方式\n<ul>\n<li>例句：你是怎么看出来的？</li>\n</ul>\n</li>\n<li>表达好坏关键在内容：要加强内容的深度和宽度\n<ul>\n<li>多读书、多分享</li>\n<li>言之有物\n<ul>\n<li>最基础的是细节和具体</li>\n<li>用行为与场景来代替形容与评论\n<ul>\n<li>如何描述老师的课程很无聊\n<ol>\n<li>老师的课很无聊</li>\n<li>老师的课，让我容易慌神</li>\n<li>听课途中，不自觉想起过世的外婆</li>\n</ol>\n</li>\n<li>用现实的场景来侧面描述这件事情</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"培训后的思考\">培训后的思考</h3>\n<p>培训的过程中确实给了很多案例和互动，让我们切身感受口才的不同表达会产生不同的作用，只不过，口才的培训毕竟是<code>脑才培训</code>，是一个长期的过程，所以我们应该从长期的角度来看待这件事情。</p>\n<p>表达力是一个需要长期训练和积累的过程，不可能一蹴而就，想要在短短几天内提升表达力，那是不可能的。所以，在后续的生活中我需要将自己业余的精力投入到思考和表达力的训练上面来。</p>\n<p>我觉得以后可以这样练习：</p>\n<ul>\n<li>给自己罗列一个 <code>think todo-list</code>，以自我表达、自我辩论的方式来完成单个话题的思考。</li>\n<li>可以在上厕所时候、在一个人走路的时候、在骑车上下班的时候：争分夺秒的思考刚才路过发生的有趣事情、工作中需要深入思考的问题、自己性格/未来的问题（说白了，一有时间就开始胡思乱想吧）。</li>\n<li>在业余的时间多听一些历史典故、人物传记等，多读一些关于思考心理学相关的书籍。</li>\n</ul>\n<blockquote>\n<p>可以尝试养成随时看 <code>think todo-list</code> 的习惯</p>\n</blockquote>\n<p>思考的内容可以是人生中的任何问题，比如说：工作、开源项目、家庭、朋友、健身、梦想等等，本质上<code>只要是值得思考</code>的内容都可以用业余时间进行思考。</p>\n<p>当然，我觉得老师们给出的思考和表达的方法是实战中总结而来的，是经过实践检验过的，我只需要知道我需要拿着这些心法在日常生活中多多练习，可能时间要长一点，没关系，成就唐僧的不是最终取到的真经，而是整个取经的过程。</p>\n<h2 id=\"如何即兴发挥\">如何即兴发挥</h2>\n<p>即兴讲话的重点是框架。也就是说，你想表达某个想法的时候，大脑中能够迅速建立起观点表达的框架，就决定了你说话的流畅性，条理性和内容的丰富性。</p>\n<h2 id=\"参考文章\">参考文章</h2>\n<ul>\n<li><a href=\"https://xueqiu.com/4061004434/218445716\">雪球：怎样说话有条理（掌握六个表达框架）</a></li>\n</ul>\n","categories":["thoughts"],"tags":[]},{"title":"如何提高生活的质量","url":"https://wj-mcat.github.io/2024/09/02/thoughts/how-to-improve-quality-of-life/","content":"<span id=\"more\"></span>\n<h2 id=\"幸福\">幸福</h2>\n<p>什么是幸福呢？</p>\n<p>我作为一个刚满三十岁的中年男人，我的幸福感就是：每周五提前回到家看到孩子扑到我身上来、老婆在家里等着我、在技术上做出了创新性的突破以及我瘦了。</p>\n<p>这就是从不同类别和当年能带我愉悦的事情，那我们从客观层面对其进行划分，那曾经有什么是能够让我肾上腺激素飙升，多巴胺狂飙的瞬间。于是我 youtube 了一下，幸福往往来源于：兴趣、满足感和目的。</p>\n<h3 id=\"兴趣\">兴趣</h3>\n<p>兴趣的定义就是做喜欢的事情，就好比如小男孩喜欢玩车车、玩水、看动画片，这都是出于本能的兴趣爱好。</p>\n<p>对于我而言，在写代码的过程中感受到快乐，特别是发现了别人的一个bug、开发出一个新方法等，这的确是我的兴趣爱好之一，本人也很庆幸以此为生。</p>\n<blockquote>\n<p>写代码也算是一种艺术工作，就像画画，你需要构造光，线条，阴影甚至背后的故事，只是呈现的方式不太一样。</p>\n</blockquote>\n<p>除此之外，写文字也是我的一大爱好：还记得从初中开始就坚持在写，只不过没成日记，倒像反思录。每次内心充满不安、焦虑、无助甚至痛苦的时候，都会用文字的形式来与自己对话，每每都能够释怀。</p>\n<p>这些兴趣爱好足以填充我所有的日常生活，让我偶尔在另外一个世界中神游，释放自我，就好像在玩一个开放世界的单机游戏，你就是整个世界的主宰，无拘无束，胡思乱想，任意妄为。</p>\n<p>兴趣是极其重要的存在，因为它一定程度上决定着你的业余时间以及人生如何度过，我呼吁所有读者，有时间静下来想想，自己的兴趣爱好是什么？是否有时间投入其中？</p>\n<p>我是幸运的，也会珍惜这份幸运。</p>\n<h3 id=\"满足感\">满足感</h3>\n<p>你对现在的工资满足吗？你的现在的伴侣满意吗？你对现在的生活满意吗？你对现在自己的状态满意吗？</p>\n<p>满足感就是你对于现状的满意程度，而这个也会影响着你的心情以及后续工作和生活上的决策；可是面对不同的事情需以不同的满足感阈值以及态度对待：</p>\n<ul>\n<li>面对工作，保持一定的不满足感，这将让你持续不断学习，无论是从认知还是专业领域皆保持一定的领先性。</li>\n<li>面对生活和伴侣，要珍惜当下珍惜彼此，不带任何抱怨，用自己的爱来对待爱情中的每一件小事，去认真享受生活和呵护伴侣，携手面对每一件事情，你终会收获到爱情上的幸福感。</li>\n<li>面对自己的现状，以一种中庸的状态来面对，<strong>我只需努力，剩下的交给老天，至于结果如何，老子我统统接受</strong>。</li>\n</ul>\n<p>所以啊，珍惜当下，奋力拼搏，永远不抱怨。</p>\n<h3 id=\"目的\">目的</h3>\n<p>我已经是一个成年人，做事目的性很强，所以能知道我想什么不想要什么，这有好有坏。</p>\n<p>好的层面是自己注意力更集中，不会关注与事情无关的琐碎，而是全身心投入到事情本身中，尽全力做到最好。</p>\n<p>当然，坏的层面就是做事太功利，容易忽略过程中的美好，这会让我们丧失对事情本身的兴趣。</p>\n<p>所以啊，目的性不要太强，认真做事，</p>\n<h2 id=\"工作、爱好和生活\">工作、爱好和生活</h2>\n<p>这里其实想说的是：如何平衡好工作、爱好和生活。</p>\n<p>先抛出这三者之间存在的问题：工作会占据着大量的时间，特别在互联网行业当中也经常会加班，那自己的爱好也需要花一些时间，如果都给了两者生活将没有额外的时间了。</p>\n<blockquote>\n<p>对于一个已婚男士，生活就是陪老婆孩子、处理家务、承担一个儿子/老公/爸爸的责任，这些是需要花费大量的精力和时间。</p>\n</blockquote>\n<p>通常情况，以上三者仅仅能取其二，再多根本就没有时间。毕竟每个人的时间都是 24H，没办法再多腾出时间来处理。</p>\n<p>这在我这儿曾经是一个问题（现在已经释怀了很多，一年前我曾与老婆多次因为时间分配吵架，现在已经没有了），只不过通过不断的思考和沟通，此问题或许是已经解决了：通过刨除无效娱乐时间，充分利用碎片化时间并与家人沟通好固定的块状时间来权衡好三者。</p>\n<p>简单来说就是这样：</p>\n<ol>\n<li>家里有任何事情，都要主动积极且高效完成，这样可以缩短处理家务的时间。</li>\n<li>拒绝刷抖音和 B 站，避免浪费时间。</li>\n<li>如果自己想要阅读谋篇文章或 paper，此时需要跟老婆沟通好时间，提前做好规划。</li>\n<li>每天都要规划好时间来陪伴家人，并承担一定的责任。</li>\n</ol>\n<p>我相信，多思考多沟通并主动尝试改变可以解决好这个问题。</p>\n<h2 id=\"人生经验\">人生经验</h2>\n<blockquote>\n<p>如果你不作出任何行动上的改变，你将无法改变你的人生。</p>\n</blockquote>\n<p>如果想要开始改变，慢慢获得幸福，那就需要开始做：</p>\n<ol>\n<li>规划你的每年、每月、每周该做的事情</li>\n<li>制定令人兴奋的长期人生目标</li>\n<li>开始长期且定期的身体锻炼</li>\n<li>规划好每日的时间安排，一部分给生活，一部分给梦想</li>\n<li>排除会对你产生干扰的物质，比如手机</li>\n<li>你的业务时间应该是在写文字的游戏当中度过</li>\n<li>一定要记得多阅读、多阅读、多阅读，此外还不要忘记：思考、行动、输出。（形成一个良性阅读闭环）</li>\n</ol>\n<p>同时，还有一些事情你要戒掉：</p>\n<ol>\n<li>切忌暴饮暴食</li>\n<li>切忌沉迷虚幻的诱惑当中，比如娱乐小视频（被算法暴风吸入，无法挣脱）</li>\n<li>戒掉任何会阻止你看书、写文章、写代码的事情</li>\n<li>不断尝试治疗你的拖延症，虽然这是一个无法根治的癌症</li>\n<li>避免同时做多件事情，这会大大降低你完成事情的质量</li>\n<li>不要陷入到恶性纠结循环旋涡中，想一件事情就立马做，没有绝对的对错，选一个你当下最好的选择即可</li>\n<li>能线下见面的朋友，避免线上无效沟通</li>\n<li>观看任何新闻信息：一种传递暴力、好奇、垃圾信息的途径，99% 都与自己无关，个体也无法从中接受到任何收益</li>\n</ol>\n<blockquote>\n<p>以上内容均从我自身出发，部分没说全说明白的，对于我而言无效。</p>\n</blockquote>\n<h2 id=\"吃喝玩乐\">吃喝玩乐</h2>\n<p>吃喝玩乐是能直接获得多巴胺的方式，也是绝大多数获得快乐的方式。</p>\n<p>我的观点是：适度享乐，保养身体。</p>\n<p>任何事物过犹不及，特别是：吃喝和玩乐。适可而止，在闲暇之余尽情的享受生活。</p>\n<p>首先要摒弃低级娱乐，最大程度上利用好自己的时间。</p>\n<p>那什么事低级娱乐呢？抖音上面的</p>\n<p>一个模型要想效果好，首先要提高训练数据的质量，其中最差的数据就是手机推送新闻消息。比如在地铁上面、在家里都会被手机里面推送的**“有趣”**新闻给吸引过去，于是就陷入到信息旋涡当中，无法自拔。</p>\n<p>所以，如果我们手头上总是有事情要做，一旦闲下来就会打开手机处理todo list即可。当然其中还会包含一些娱乐项目，此时本人可以根据实际时间块来安排具体任务。</p>\n<p>至于美食的话，是需要和爱的人在休假期好好吃，好好玩，享受在一起的美好时光。</p>\n<h2 id=\"总结\">总结</h2>\n<p>人生是一场修行，提升自身的幸福感是一个不断思考和实践的过程。</p>\n<p>祝愿所有人都能够找到自己的幸福平衡点。</p>\n<h2 id=\"参考链接\">参考链接</h2>\n<ul>\n<li>[0] <a href=\"https://www.quora.com/What-single-thing-would-improve-the-quality-of-your-life\">What single thing would improve the quality of your life?</a> <div id=\"quality-of-life\" /></li>\n</ul>\n","categories":["thoughts"],"tags":[]},{"title":"职场是一生的战场","url":"https://wj-mcat.github.io/2024/08/19/thoughts/career/","content":"<ul>\n<li>人要信命\n<ul>\n<li>这个时代，个人努力与成功不能划等号，更多的是时代和公司的机遇</li>\n<li>我们要学会判别机遇、抓住机遇，甚至通过一些方法来增加成功的可能性</li>\n</ul>\n</li>\n<li>做事不能太功利\n<ul>\n<li>功利对于短期是有利的，可对于长期肯定是有害的</li>\n<li>当你把企业当成家的时候，需要用长期注意来看待，同时家人也会感受到你的真诚</li>\n</ul>\n</li>\n<li>先做成事情，后做好事情\n<ul>\n<li>必须要将手头上的事情做成，再慢慢将事情做好 -&gt; 先完成 60 分的目标，再完成 80 分的目标</li>\n<li>做成事情，只能说明你能力符合要求，可是做好事情，却能说明你的能力很突出，能将某些事情给做到完美：难道不想挑战一下自己？看下自己能不能把这个事情做到极致。</li>\n<li>做正确的事情，正确的做事情。</li>\n</ul>\n</li>\n<li>要做成大事，需学会构建团队\n<ul>\n<li>一个人的力量是单薄的，一个团队的力量是无穷的；一个人或许可以走的更快，可是一个团队肯定走的更稳，更远。</li>\n<li>努力让你自己成为你同事的资源，这样你同时也会成为你的资源。</li>\n</ul>\n</li>\n<li>提高判断力，是做好事情的银弹\n<ul>\n<li>无论是实施者还是管理者，都需要提高对事情的判断力，进而提高做正确事情的概率，进而朝着一个大致正确的方向上走。（就好比向量相加，只要整体方向大部分是对的，那你距离最终目的地肯定不远）</li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<hr>\n<h1>写于：2024.08.19</h1>\n<h2 id=\"这个月底lastday\">这个月底lastday</h2>\n<p>自从接触 Agent 后，对其未来非常看好，由于部分原因，个人换了一份 Agent 一线算法工程师的工作，主要想在这个风口时代，快速积累相关经验，抓住一些未知的机遇。</p>\n<blockquote>\n<p>并不知道这个决定是否正确，只知道内心的声音：多去看看外面的 Agent 是什么样子吧，不要局限自己。</p>\n</blockquote>\n<p>离开，不是因为工作不开心，更多的是个人兴趣、精力的改变，同时也正是因为和同事的关系很好，离开总是不舍。</p>\n<p>我们也是幸运的，站在一个风口上，从个人角度出发，我想要快速积累经验，所以想要换一个环境。</p>\n<p>接下来将要开启我的下一段职业生涯，中午跟我领导吃了一顿饭，给了非常多有建设性的建议，受益匪浅，也是他职业生涯（他虽然职业生涯也不是很长，可是一直在做正确的事情，给出正确的判断）的经验总结。</p>\n<p>就我个人而言，我会仔细思考这些经验，尝试将其内化到自己职业发展过程中来。</p>\n<blockquote>\n<p>当然，很可能几年后我会回过头来继续修改这篇文章，那个时候可能会有对职业新的思考。<br>\n也非常欢迎大家参与讨论，分享对于职业规划的想法。</p>\n</blockquote>\n<hr>\n<h2 id=\"人要信命\">人要信命</h2>\n<p>人的成功与否一定程度上不掌握在自己手中，而是时代和机遇。</p>\n<p>当然如果你是一个天才，有着非常强的执行力、创新力，那你在<strong>哪个时代</strong>下你都可以做出一番事业。比如<a href=\"https://space.bilibili.com/20259914?spm_id_from=333.337.0.0\">稚晖君</a>就是一个典型例子，这种人就活该成功，也必定成功。只可惜绝大多数的人都是他，也称为不了他，也有很多人一直在成为他的路上，在执着着，在努力着，这些人是最容易受挫折的，也是最需要信命的。</p>\n<p>我这里想说的是，事业的成功与否，一定程度上不掌握在自己手中，可是，可以通过一定的方法来提升成功的概率，比如说：分享、兴趣、职场技巧、写作、社交等方式。</p>\n<blockquote>\n<p>当然这些内容在此不细讲，内容实在是太多，感兴趣的大家可以自行去搜索相关文章，我相信有非常多优秀的博文来详细介绍每个子方向。</p>\n</blockquote>\n<p>在你成功的时候，你要信命，知道这一切其实是命运给你的，并不是 100% 由于你的能力和努力，希望你戒骄戒躁，始终坚持做正确的事情。</p>\n<p>在你失败的时候，你要信命，知道绝大部分人都是这种状态，因为失败其实是人生中的一种常态，不用太多余气馁，只要是在做自己感兴趣的事情时，这就已经是一定意义上的成功了。</p>\n<p>人要信命，其实也是一种态度，看待命运和人生的态度，每个人来这世界上走一遭，区别是在于体验不同，如果你始终在做自己喜欢的事情，我相信你是一个非常幸福的人。当人在工作当中处于一种幸福的状态，钱会追着你跑。</p>\n<p>所以啊，人要信命，坚持做自己喜欢的事情就行了，这样你的人生才会走的更加顺畅和坦然。</p>\n<hr>\n<h2 id=\"不要太功利\">不要太功利</h2>\n<p>就像上个章节所说，人始终要做自己喜欢的事情，长期来看，人生才会有更多的幸福感和机会。</p>\n<p>如果我给自己未来三年内的职场定义为：我要成为一个领导N人的leader，这样会迷失自我，甚至陷入无尽的内耗当中。</p>\n<p>功利的人通常是短期主义，在当下要拿到高收益，从而忽略了后期的增长速度，一旦没有达到当初的预期时，对于结果得失心很重，此时会产生无穷的焦虑感，陷入到自我内耗当中，此外很可能也会去内耗别人。</p>\n<p>所以，放弃功利的想法，放弃短期主义，拥抱长期主义：</p>\n<p>比如说你的身体健康，尽量抽出一定的时间来跑步、骑单车上下班、轻断食保持身体活跃性。</p>\n<p>比如说坚持阅读，无论是技术上的新进展，还是新论文，都可以纳入到自己的文件夹当中，定期来阅读、总结和分享，保持和业内的相关人事保持一定的沟通频率，进而让你的思想能够和时代接轨甚至保持一定的前瞻性。</p>\n<p>比如说有时间就写写开源代码，可以不用是给自己的repo写，也可以是给别人的repo贡献代码，进而熟练掌握多种不同的技术路线。</p>\n<p>比如说有时间学一学如何构建团队，如何管理团队，如何让团队更高效的沟通，保持一定的活力。</p>\n<p>不过，不功利是不可能的：人都是想要更好的薪资、更好的平台、拒绝996希望换一份能够WLB的工作，只是在追求这些目标的同时，还能够保持一份追求自己热爱的事情。</p>\n<p>大家都是打工人，在功利和热爱之间，需要把握好一个度，权衡好两者，尽量做到两者兼得：成年人不做选择，两个都要。</p>\n<hr>\n<p>接下来就来聊聊职场上的具体技巧，希望对大家有些许帮助。</p>\n<hr>\n<h2 id=\"做成事情，做好事情\">做成事情，做好事情</h2>\n<p>做成事情是60分，做好事情是80分，所以我们要先把Leader交给你的事情做成，能够满足他们的预期，这样就已经完成了60分，然后再把事情做到80分。</p>\n<p>这个道理我相信大家都知道这个原理，可是执行起来就很难，通常的原因是：手上的事情太多，每个都达到 60 分都费劲，哪儿还有精力达到 80 分呢。</p>\n<p>为了解决这个问题，此时你需要：</p>\n<ol>\n<li>在跟Leader领任务的时候，切忌为了让领导对自己满意进而领过多的任务，而是将精力集中在重点事情上，然后把这件事情做到80分，其它事情达到 60 分即可。</li>\n<li>如果基于你当前的工作效率和工作时间，只能够把所有事情做到60分，此时你要么提升自己的工作效率，进而空出更多的时间来优化重点项目，要么加班来优化重点项目，别无它法。</li>\n</ol>\n<p>通常情况下，这些优化你都需要做：跟Leader领取任务时表示自己手上还有事情没做完，想好好做，然后私底下提升工作效率，也需要稍微加点班来优化重点项目，此时我相信能够最大程度上让你在工作当中有一个令领导影响深刻的事情，此时后续也会将重点项目交给你来做。</p>\n<p>所以，先做成事情，再努力做好事情，每一件事情都要努力做到最好。</p>\n<h2 id=\"团队是关键\">团队是关键</h2>\n<p>不想当军官的士兵不是好兵，不想带团队的程序员不是好码农。</p>\n<p>对于我而言，虽然目前仅仅毕业两年，我也非常渴望能够组件一个团队来完成一些有意思的事情，可是这对于现阶段的我而言还是太难了。</p>\n<p>不过，为了实现这个目标，我还是要努力一把的，至少是有步骤有策略的努力：</p>\n<p><strong>跟同事友好相处</strong></p>\n<p>一旦你能做好事情，然后也有一些关系很好的同职级或比自己低一些的同事，此时你可以拉着他们一起做有挑战性的项目，此时跟你关系很好的同事将会是你最有力的帮手。</p>\n<p>当然，主力肯定还是比自己职级低的同事，他们才愿意跟着你干。</p>\n<p><strong>做直属领导的得力干将</strong></p>\n<p>你需要成为你领导的得力干将，来帮他们解决核心问题，项目多了，时间长了，随着你领导往上升，你自然而然就会升上去；即使领导走人了，或许也会带着你走。</p>\n<p>在职场中，解决你领导的烦恼，这是最快晋升的方式，也是职场中最关键的点。同时你领导也会将一些资源倾斜给你，做一些重点项目。</p>\n<h2 id=\"判断力\">判断力</h2>\n<p>首先，判断力对于一个领导极其重要，对于一个做事情的人也至关重要：它会让你领导在最短时间内信任你，并把重要的事情交给你。</p>\n<p>如何提升判断力的话，这点太复杂了，有很多方法论，我也看过一些，不过最本质的还是基于：</p>\n<ol>\n<li>你掌握的上下文信息量。</li>\n<li>要保持和团队人员沟通，获取到最新的关键信息。</li>\n<li>要多表达，获取到 feedback 之后反思自身。</li>\n</ol>\n<p>这点是每个人都要认真对待的能力，也需要用一生来学习。</p>\n<h2 id=\"总结\">总结</h2>\n<p>这是我这段时间的总结，希望能够给大家一些思考，当然会有很多不对的地方，也欢迎大家批评讨论。</p>\n","categories":["thoughts"],"tags":["thought","life-long-learning","career"]},{"title":"Become a Tech Writer","url":"https://wj-mcat.github.io/2024/06/16/thoughts/become-a-tech-writer/","content":"<p>我要坚定的成为一个输出者。</p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"为什么要成为一个输出者？\">为什么要成为一个输出者？</h2>\n<p>其实自己尝试过很多次，失败过很多次，躁动的心让自己反反复复的进行着计划、放弃之间的循环。</p>\n<p>无论是从个人成长以及个人发展的角度来看，做一个技术输出者是一个沉淀的过程，这一点毋庸置疑，而且等坚持到一定程度之后，这将完完全全改变自己的境况，扩大自己的可能性和市场。</p>\n<p>同时，我也热爱写文字，写内心的感受，从高中开始。虽然自己的写作水平真的不咋地，可是我就是想写，只要有那么几个人看，我就是想写，可能就是那种“又菜又爱玩”的那种，不知道你是否属于这类人群。</p>\n<p>自己以前尝试又放弃，如此循环多年，直到现在依旧如此，所以我想结束这一切，让自己一直走在路上把，这或许就是我想成为一个输出者的理由吧。</p>\n<p>够充分了吗？好了，我要不停的开始输出了。</p>\n<hr>\n<h2 id=\"如何成为一个输出者\">如何成为一个输出者</h2>\n<h3 id=\"形式\">形式</h3>\n<p>输出形式目前就先仅限于技术博客，如果后面遇到了合适的机会，我想也会重新尝试开源项目吧。</p>\n<p>博客的内容需要在高质量层次，同时需要有一定的系列性，个人感觉需要将博客以书籍的形式来编写，所以就会有系列丛书。（甚至自己完全可以以写书的形式来先写出博客，然后再按照规定好的目录依次编写下去，我相信这会是一种非常好的）</p>\n<p>好了，以上文字可能比较乱，总结一下：我的目标可以定为写一本书，然后罗列好粗略的大纲，在写书的过程中会不断地更新每个章节的细节，甚至调整目录大纲，这是一个很正常的事情，所以，遇到自己想写的，就好好写吧，然后把它写清楚，最后以 github pages 的方式开源输出，让更多的人能够看到，读到，同时了解到我。</p>\n<p>所以，形式不是一个博客，而是一本书。</p>\n<h3 id=\"时间\">时间</h3>\n<p>时间就像海绵的水，只要你愿意肯定是可以有的，平时的碎片时间很多，我相信慢慢把这些技术点写清楚，写明白，自己未来会有很大的可能性。</p>\n<p>我想，我应该完全可以挤出来写技术博客的时间，只要我放弃低级娱乐：玩手机、刷各种无聊的短视频。在家里如果没啥事的话，我应该要拿起电脑，开始写文字，写代码，写各种有趣的应用，然后分享出来。</p>\n<p>所以，时间对于我们是公平的，我每天的时间利用率已经很高，不过我相信自己还能够提升碎片时间的未来价值，当然这是除开与家人陪伴的时间，这个是无法衡量的。</p>\n<h3 id=\"内容\">内容</h3>\n<p>当然，我的内容应该分为：技术丛书系列以及内心思考系列。<br>\n前者主要是以github pages 展开，编写类似于 LLM 和 Agent 相关系列丛书，不同种类的丛书会聚合到一起，成为handbook，作为入门到精通的系列文章，通过时间的沉淀，我相信可以成为一个极具影响力的开源人。</p>\n<p>当然，里面还会包含大量的paper-reading，以及自己所读所想所感，同时会支持让其他写博客的人往里面提PR，成为一种技术讨论的开源社区，所有的沟通都是在PR、Issue以及Discussion 里面展开，所有的内容讨论都是开放、开源，大家都可以参与头脑风暴，甚至会有很多志同道合的人参与进来，进而共同成长，共同学习。</p>\n<p>我在此继续脑暴，甚至以后会举办更多的线下线上活动，甚至可以参考 datawhale 进行类似的发展，当然这是后话了。</p>\n<hr>\n<h2 id=\"在我能坚持的时候就坚持\">在我能坚持的时候就坚持</h2>\n<p>我老婆说：</p>\n<blockquote>\n<p>在我能坚持的时候，就努力去坚持；在我坚持不了的时候，就停下来想想这件事情对我有多重要，然后再看看要不要继续坚持。</p>\n</blockquote>\n<p>所以，现在不要去想能不能坚持下去，目前最重要的就是，在想写和能写的时候就开始写下去。</p>\n<hr>\n<h2 id=\"总结\">总结</h2>\n<p>今天可能是自己的一个重要的时间节点，开启我新的人生。</p>\n","categories":["thoughts"],"tags":["thought","life-long-learning"]},{"title":"产生想法","url":"https://wj-mcat.github.io/2024/01/04/blogs/sam-generate-ideas/","content":"<blockquote>\n<p>没有各种奇思妙想的人，人生肯定不精彩。</p>\n</blockquote>\n<ul>\n<li>想法很重要\n<ul>\n<li>有趣的灵魂，想法通常跟别人是不一样的</li>\n<li>打工人可通过惊艳的想法来展现自己的必要性</li>\n<li>leader 必须要具备敏锐的 taste 来带领团队走的更远</li>\n<li>用不断涌现的idea 来改变自己的人生</li>\n</ul>\n</li>\n<li>让想法不断的涌现\n<ul>\n<li>和优秀的人在一起</li>\n<li>多关注最新技术进展，并能够参与到讨论当中</li>\n<li>多参加线下技术讨论论坛</li>\n</ul>\n</li>\n<li>如何辨别想法\n<ul>\n<li>说服自己完全信服这是一个好 idea</li>\n<li>说服不相信这个 idea 的人相信这个</li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"想法对于人生而言，至关重要\">想法对于人生而言，至关重要</h2>\n<p>有趣的灵魂通常会吸引周围的人，成为人群中的焦点，最终收获不同的人生，有的人收获了财富，有的人收获了爱情，也有的人收获了很多朋友。所以拥有一个有趣的灵魂，会一定程度上会让你的人生更加精彩。而有趣的灵魂通常是具备着和别人不一样的想法，且总是能够说服别人相信你的想法。</p>\n<p>而对于普通打工人的我们而言，拥有好的想法能够让同事钦佩你，老板认同不，如果这种想法能够源源不断的出现，那么你的工作将会变得顺风顺水。</p>\n<p>当然作为一个 leader 而言这一点更加重要，能否敏锐的察觉到当前技术趋势、市场变化等因素一定程度上决定了团队的产品接下来是否会迎来增长，同时也会影响团队成员对于未来的信心和工作效率。</p>\n<p>所以，拥有一个好的想法，对于任何人而言至关重要，这样你的人生才会更加精彩。</p>\n<blockquote>\n<p>致不甘平凡的我们。</p>\n</blockquote>\n<h2 id=\"让想法不断涌现\">让想法不断涌现</h2>\n<p>没有人天生就总是能够有一个“千奇百怪”的想法，这些东西都是周围的环境给予我们的，因为我们所有的认知都是基于周围环境而来，其中就包括你周围的人、你每天吸收到什么样的信息、你如何处理这些信息等。这些因素都在不同程度上影响你的思想，从而影响着你能够产生出更好的想法。</p>\n<p>首先，一个非常重要的一点是，你需要和优秀的人一起，他们总是能够给你带来新的信息，也能够验证你的信息是否正确合理，甚至讨论之后能够碰撞出新的想法。而这种想法将是弥足珍贵的，这个是你一个人很难产生的。所以在生活中尽量避免那些浪费你精力的社交，讲重点放在那些有价值的人和事情上面，这样会加快你的步伐，方向也会更加明确。</p>\n<p>跟优秀的人在一起，最重要的一点就是多谈论，更多的表达自己的观点，从而让别人验证你的想法是否正确，同时也能够给予你启发性的想法，从而让你的想法快速迭代，想想都令人激动。</p>\n<p>为了能够跟优秀的人畅谈，你需要有一定的信息储备和技巧，比如多关注一下最新技术进展，学习之后跟大家分享（通过线下讨论、线上博客的形式都是 OK 的），甚至在分享之前提前做好准备，这样能够让你的想法更加清晰。</p>\n<p>此外，你也可以参加一些线下的技术论坛，此时你会遇到各种各样有趣的人，他们拥有不同的背景，不同的想法，这些也会让你产生出更多新的想法。</p>\n<h2 id=\"验证想法\">验证想法</h2>\n<p>当你有不断涌现的想法时，你不可能每个都执行它，需要进行验证后才能够考虑是否要采纳并执行，毕竟不可能每个都是那么的：切合实际、靠谱且存在一定的未来价值，所以验证想法这个环节举足轻重。</p>\n<p>那如何验证呢？</p>\n<p>第一个方式上文也提到过，就是和优秀的人分享，从他们的反馈中你能够获得很多信息，比如他们是否认同你的想法、他们对于你的想法的看法等，这些都将是验证想法的重要依据。<br>\n第二个方式就是线上分享，比如分享到博客、微信公众号等，让更多的人看到你的想法，从而获得更多的反馈，这种方式周期比较长，需要你付出更多的精力，可是获得的收益也是持久的，因为你会不断获得个人品牌力，随着时间的沉淀，你分享的知识也会想越来越多的人验证，从而佐证你分享的内容的正确性。</p>\n<p>以上两种方法本质上都是通过分享的方式来说服别人认同自己的观点，同时也是和别人讨论的某种形式，所以只要能够将你的想法分享出去，别给出足够的说服力，就足够证明你的想法一定程度上是被验证过的。</p>\n<hr>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://blog.samaltman.com/idea-generation\">Idea Generation</a></li>\n</ul>\n","categories":["blogs"],"tags":["thoughts"]},{"title":"原来，高考可以重来","url":"https://wj-mcat.github.io/2023/01/30/thoughts/2023-01-restart-life/","content":"<p>高考的失利让我至今还微妙的影响着我，曾无数次想象着如果高考可以重来，我一定要更加努力，争取有一个好成绩，考上一个更好的学校，可是这一切都是幻想。</p>\n<p>从 13 年到 23 年，我花了十年的时间，终于明白了，原来人生可以重来。</p>\n<h2 id=\"失利是人生的常态\">失利是人生的常态</h2>\n<p>小到一次打麻将输钱，大到高考落榜，这都是人生必须要经历的事情，甚至说这是人生的常态。当你开始学走路时，总是要经历无数次摔倒爬起摔倒再爬起的过程，最后才能走的稳健；当你学一个知识点，总是会经历过无数次的错题后才会拿到100 分；当你进入一个新领域，总是要四处碰壁后才能够处事圆滑；我们无数次的失利其实是为了最后的成功，而人的一生总是在接触新事物新环境，所以失利总是会伴随着人的一生。</p>\n<h2 id=\"高考落榜算是失利吗\">高考落榜算是失利吗</h2>\n<p>从字面上来讲，既然是落榜了，那肯定算是失利啊。可是这放在不同人身上的表现可能会不一样。</p>\n<p>比如有的人会随波逐流，不思进取，在大学里面浑浑噩噩的度过了四年，根本没有自己的目标和方向，也没有学习到具体的技能。</p>\n<p>可是也有的人（比如说我）受到打击之后便决心改变自己，不甘于此，开始思考以后的路该如何走，未来的我将是什么样子？有了思考便会延伸行动，于是考研，毕业后也能找到自己理想中的工作（当然我不是电视剧里的男主，能够很完美的逆袭，我只能说比当初高中同班同学们要好一些）。</p>\n<p>高考落榜算是失利吗？我觉得也不算是，前提是它对你有正向反馈的作用了。</p>\n<h2 id=\"又重新高考了\">又重新高考了</h2>\n<p>毕业后进入职场，发现 有太多的东西需要考虑：如何把工作做得更好，如何权衡好爱情工作兴趣，如何管理好自己。</p>\n<p>当初高考是为了进入一个好大学，未来找一个好工作，从而有一个幸福的生活。从学校进入职场之后我发现，最终的目标还是没变过，好好工作，管理好自己，从而能够更快的升职加薪，从而有一个幸福的生活。</p>\n<p>我发现都是在努力朝着一个方向前进，高考的方向是高分，工作的方向是升职加薪，其中都需要一个重要的因素：努力。</p>\n<h2 id=\"如何去努力\">如何去努力</h2>\n<p>高考的时候，我由于心理素质不够好，产生了一些生理上的影响，最后导致我考前两个月失眠，临考还在打点滴，这说起来都感觉很丢人。</p>\n<p>不过话说回来，自我感觉高中那会儿我还是有在努力，只不过效果不太好，结局不太好。</p>\n<p>那现在进入职场了，感觉站在了一个起跑线上，就像当初高一入学。</p>\n<p>当初的心理素质不太好，总是想东想西，不够纯粹，且毫无任何章法可言，那我现在又重新开始高考，我不再会像以前一样笨拙，浪费时间。而是：</p>\n<ul>\n<li>需要把时间花在有价值，能够不断提升自我的事情上面。</li>\n<li>做事情纯粹一点，想得太多反而会阻挠进度。</li>\n<li>不要害怕失败，要勇于尝试，只有经历过多次之后才能够快速成长。</li>\n<li>要经常思考，并与最友好的同学们探讨相关话题。</li>\n</ul>\n<h2 id=\"人生可以重来\">人生可以重来</h2>\n<p>我们生活的目的是为了实现价值，生活更美好，也是在不断的重新开始，然后准备迎接下一个重大阶段。</p>\n","categories":["thoughts"],"tags":["thought","life-long-learning"]},{"title":"开源项目的PM","url":"https://wj-mcat.github.io/2022/11/20/thoughts/project-manageer-of-opensource-project-md/","content":"<p>这几年一直在接触开源，也认识了一些热爱开源圈的朋友，或许也是因为他们让我爱上了开源。这段时间也在开始在某大厂专职做开源，接触到了里面的一些运作模式，此外也和朋友聊了一些关于开源的一些理念，特别是PM 这块，所以在此想与大家探讨一些细节问题。</p>\n<h2 id=\"PM-是什么\">PM 是什么</h2>\n<p>PM（Project Manager，项目经理）在传统互联网项目当中是一个至关重要的角色，主要负责项目的设计、规划、与客户&amp;技术人员沟通反馈等任务。</p>\n<blockquote>\n<p>A project manager is a professional in the field of project management. Project managers have the responsibility of the planning, procurement and execution of a project, in any undertaking that has a defined scope, defined start and a defined finish; regardless of industry. Project managers are first point of contact for any issues or discrepancies arising from within the heads of various departments in an organization before the problem escalates to higher authorities, as project representative.<br>\n— <a href=\"https://en.wikipedia.org/wiki/Project_manager\">Project Manager from wiki</a></p>\n</blockquote>\n<p>PM负责项目交互设计，所以非常清楚项目在使用体验上的好与坏，也可以和客户进行良好的沟通；PM设计了对应的交互 UI，所以清楚此功能模块的大致工期，所以在规划项目开发周期上也显得游刃有余；同时 PM 对产品的交互细节非常清楚，所以可以跟客户侃侃而谈；</p>\n<blockquote>\n<p>当然这里就细说PM 和开发人员之间的 diss 了，不在此文章的讨论范围之内。</p>\n</blockquote>\n<p>当然，大厂做开源或多或少也会把上面的一套经验直接搬到开源项目中来。</p>\n<h2 id=\"互联网的-PM\">互联网的 PM</h2>\n<p>我们先假定直接把传统互联网PM直接搬到开源项目中来，会出现以下情况：</p>\n<blockquote>\n<p>先假定PM是一个没有技术背景的人员或者是对实现细节不清楚的初级开发人员。</p>\n</blockquote>\n<ol>\n<li>PM 负责开源项目的交互设计（API）。</li>\n<li>PM 与开源社区中的开发者（客户）沟通他们遇到的问题，并尝试解决。</li>\n<li>PM 评估并规划不同功能（Bugfix、Improvement、New Feature）的开发周期。</li>\n<li>PM 与开源社区和企业用户聊开源产品的交互（API）细节。</li>\n</ol>\n<p>听着是不是感觉很不可思议？而且还是不可能执行，于是管理者就会想一个折中的解决方案：</p>\n<ol>\n<li>API 接口肯定是设计不了了，那就交给开发人员吧，让他们自行自行设计。</li>\n<li>开源社区的开发者问题肯定是回复不了了，那就让团队开发人员去回复，可他们自己手上又有一大堆的开发任务，没办法让他们全职来做这个事情，所以就只能让他们「轮班」来回复群里面的问题。</li>\n<li>PM 没办法知道Bugfix、Improvement 和 New Feature 到底需要花多长时间，所以开发周期和发版计划都是有 tech leader 来决定的。</li>\n<li>PM 由于不懂技术，所以和开源社区的技术人员很难聊到一块去，更别谈针对于某一些底层架构设计的讨论了，所以就只能够与企业用户聊产品介绍：我们有什么，能做什么？可是一旦聊到：“你们是怎么做的？”可能 就会直接通话转接到技术人员那里（这个层面也还可以）。</li>\n</ol>\n<blockquote>\n<p>以上观点不代表所有互联网PM，也不代表某具体公司的PM，没有任何针对性质的言论，仅仅是把我所遇到的现象描述出来。</p>\n</blockquote>\n<p>可是上面的实践方式会出现很多问题：</p>\n<ol>\n<li>PM 在产品中的定位就弱化了，由于没办法全程参与项目的设计、规划以及与客户（开发人员）的沟通，而且也不能让他们闲着，所以就只能干一些（大部分）运营的工作（某朋友提到了：其实现在很多 PM 干着运营的工作）。</li>\n<li>PM 没办法和客户（开发者）进行深入的沟通，所以就没办法获取到他们真实的需求，最后也没办法设计产品以及给产品排期。</li>\n<li>PM 不懂技术，所以也没办法参与到这个问题如何修复？这个可以用什么来提升性能？另外一个框架使用了最新的 XX 技术，咱们也可以引入进来，而且代价比较低，只需要 YYY 就行了。</li>\n<li>开源社区是开源项目最核心的部分，甚至比代码都重要（Community over Code），可是 PM 在开源社区的角色也也只能是一个运营，所以很难维护一个开源社区。（开源社区的开发者都想抱大佬大腿，而不是…）</li>\n</ol>\n<p>以上是我所见到现象背后所思考的一些问题，那如何解决这样的现状呢？</p>\n<h2 id=\"开源项目的-PM\">开源项目的 PM</h2>\n<p>咳咳，以下是我理想中优秀开源项目的 PM ，也欢迎大家来吐槽：</p>\n<ol>\n<li>PM 是一个精通项目Quick Start、Tutorial 的开发者，同时也是一个 <a href=\"https://developers.google.com/tech-writing/becoming\">TechWriter</a>。</li>\n<li>PM 熟悉开发者用户端的所有 API 设计使用，并参与到上层 API 中来；同时非常了解同类竞品的优点和缺点（需要深入实践使用才可以体验到）；</li>\n<li>PM 可参与到开源社区维护当中来，由于精通 examples 和 docs 内容，所以在解决群里面80%的问题，剩余 20%的问题可以请教团队负责指定模块的开发者从而恢复其开发者的问题。</li>\n<li>PM 只负责开源社区和项目API规范，运营相关的工作就都交给专业的运营相关同学完成即可，把主要的精力放在项目规范、文档以及开发者身上。</li>\n</ol>\n<p>所以总结而言，开源项目的 PM 日常工作就是：回答开源社区的问题、编写docs、编写用户级别API的开发工作、编写各种 examples，甚至写一些对于开发者友好的开源项目，并组织开源社区的开发者一起来贡献。</p>\n<h2 id=\"总结\">总结</h2>\n<p>开源社区的 PM 必须要会写代码，精通 Quick Start、Tutorial、 examples以及竞品项目在使用上的区别。</p>\n<p>可到<a href=\"https://github.com/wj-Mcat/wj-Mcat.github.io/issues/1\">开源项目的PM</a>参与具体讨论。</p>\n","categories":["thoughts"],"tags":["opensource"]},{"title":"如何挑选一只有价值的股票","url":"https://wj-mcat.github.io/2022/11/18/skills/how-to-choice-stock/","content":"<p>最近看了一些书，和朋友有了一些讨论，就分享给大家，也希望能够帮助到小白们，大神请出门左转，也欢迎留言讨论。</p>\n<h2 id=\"如何看财报\">如何看财报</h2>\n<p>财报的内容繁多，需要在其中及时获取到关键性信息，个人感觉需要两步走：一、通过 checklist 罗列出整体指标；二、深入挖掘top5 公司的细节情况</p>\n<h3 id=\"一、checklist-列表\">一、checklist 列表</h3>\n<p>初筛数据的关键字段如下所示：</p>\n<ul>\n<li>[ ] 营业收入</li>\n<li>[ ] ROE、PE</li>\n<li>[ ] 净利润率</li>\n<li>[ ] 净资产</li>\n<li>[ ] 利润增速</li>\n<li>[ ] 资产负债率</li>\n<li>[ ] 毛利率</li>\n<li>[ ] 未分配利润</li>\n<li>[ ] 分红</li>\n</ul>\n<p>以上的这些字段最后将会以 Excel 表格的形式展开，也方便后续更多在智能化表格上的个性化展示，以及动态构建在线图表，示例图如下所示：</p>\n<p><img src=\"/images/2022/stock-checklist.png\" alt=\"\"></p>\n<p>当然checklist 主要让我们从大量的公司当中，从主观出发挑选最佳top-k 公司（类似于搜索中得召回过程），接着就是从这 K 个公司当中挑选出对应最有潜力的 M 个公司（类似于搜索中的精排）。</p>\n<blockquote>\n<p>M 建议小于或等于 1。同行业的公司建议只挑选一支即可。</p>\n</blockquote>\n<h3 id=\"二、深入分析-top-k-公司\">二、深入分析 top-k 公司</h3>\n<p>既然是精排，就需要深入分析公司中的各种健康情况，根据公司的信息分类，可从以下几个步骤入手：</p>\n<h4 id=\"2-1-这家公司是干什么？\">2.1 这家公司是干什么？</h4>\n<ul>\n<li>经营业务分布</li>\n<li>主营业务分析</li>\n<li>市场占比</li>\n</ul>\n<h4 id=\"2-2-这家公司是如何赚钱的？\">2.2 这家公司是如何赚钱的？</h4>\n<ul>\n<li>公司的上下游公司是什么？占比是如何？【太集中会有断供、销售的风险】</li>\n<li>公司的销售模式如何？</li>\n<li>主营业务收入的占比</li>\n</ul>\n<h4 id=\"2-3-这家公司的经营状况如何？\">2.3 这家公司的经营状况如何？</h4>\n<ul>\n<li>每年的营业收入变化情况</li>\n<li>ROE 变化情况</li>\n</ul>\n<h4 id=\"2-4-给公司估值？\">2.4 给公司估值？</h4>\n<ul>\n<li>估算公司未来5 年的市值，同时也配合股票的情况分析</li>\n<li>寻找一套合理的公司估值公示和算法</li>\n</ul>\n<h2 id=\"Wechaty-机器人链路打通\">Wechaty 机器人链路打通</h2>\n<p>通过自动和被动的情况来来获取相关股票信息。</p>\n<h3 id=\"主动推送股票消息\">主动推送股票消息</h3>\n<p>机器人可定时往群里面推送相关股票消息，比如说雪球每日精选、某几支股票开盘收盘价格、股票预警、当日涨跌情况推送。</p>\n<p>这类的消息通常可在指定的群里面进行，或者是收费群服务也是 OK 的。</p>\n<h3 id=\"被动获取股票相关消息\">被动获取股票相关消息</h3>\n<p>群里面的人可主动跟机器人查询相关的消息，比如询问机器人：腾讯控股今日的股价多少？腾讯控股这五年的ROE变化情况如何？</p>\n<p>机器人在群里面可监听所有人的消息，并执行对应的指令。</p>\n<p>所以，这个功能可作为主要的扩展接口开放给群内用户。</p>\n<h2 id=\"结论\">结论</h2>\n<p>最近对股票感兴趣，这些也仅仅是纸上谈兵，如有任何意见，接受任何反驳。</p>\n","categories":["skills"],"tags":["stock"]},{"title":"为什么我总是感觉到这么累","url":"https://wj-mcat.github.io/2022/11/15/thoughts/2022-11-why-i-am-so-tired/","content":"<p>在以下情况下我都会感觉到很累：</p>\n<ul>\n<li>当我想的太多，做的太少，就会感觉到很累。</li>\n<li>当 DDL 来临时，我却躺着玩手机。</li>\n<li>当你无所事事的时候。</li>\n</ul>\n<p>所以，归根结底还是</p>\n<p>所以，我可以出去跑跑步，去咖啡厅写写代码，回宿舍看看动漫，就不会觉得累了。</p>\n","categories":["thoughts"],"tags":["thought","life-long-learning"]},{"title":"Github任务调度任务","url":"https://wj-mcat.github.io/2022/11/07/skills/github-scheduler-job/","content":"<p>当你有一些想要定时执行的、内容可放到github上的一些任务，可使用Github的任务调度workflow来（白嫖）完成这个功能。</p>\n<span id=\"more\"></span>\n<h2 id=\"背景\">背景</h2>\n<p>我需要每日定期爬取国内某些股票的信息，于是便写了一个脚本让它每天早上自动化爬取并将文件自动化提交到github repo当中，从而实现：自动爬取并存储。</p>\n<h2 id=\"实现\">实现</h2>\n<ul>\n<li>新建一个repo</li>\n</ul>\n<p>这个就不需要我亲自演示了吧。</p>\n<ul>\n<li>编写爬取股票信息的脚本</li>\n</ul>\n<p>推荐使用tushare来爬去对应的数据，最终存储成文件。</p>\n<ul>\n<li>添加workflow文件</li>\n</ul>\n<blockquote>\n<p>关于如何如何添加Github Workflow可阅读<a href=\"https://github.com/features/actions\">Github Actions</a>。</p>\n</blockquote>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Daily job\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 每天凌晨执行任务</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cron</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0 0 * * *\"</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">report</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Create &amp; Save report file\n        <span class=\"token comment\"># 运行自定义脚本</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          pip install -r requirements.txt\n          python scripts/fetch_stocks.py\n          git config --global user.name 'your-name'\n          git config --global user.email 'your-email'\n          git pull origin main\n          git add .\n          git commit -am \"Auto Update stock data\"\n          git push</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过以上配置即可实现自动化数据抓取。</p>\n<h2 id=\"总结\">总结</h2>\n<p>Github 提供了很多可以白嫖的东西，同时也增加了对其的依赖性。</p>\n<p>But anyway，这对于双方都是一件好事。</p>\n","categories":["skills"],"tags":["stock"]},{"title":"恭喜DRX获得2022年MSI冠军","url":"https://wj-mcat.github.io/2022/11/06/thoughts/2022-msi-drx/","content":"<p><img src=\"/images/2022/2022-drx-smi.jpeg\" alt=\"\"></p>\n<blockquote>\n<p>图片来源于：<a href=\"https://weibo.com/5883540465/MdLgttg2Z?refer_flag=1001030103_\">DRX-微博</a></p>\n</blockquote>\n<p>电子竞技充满了不确定性和梦想，只有坚持才能够打破这些未知的不确定性，才能够逐渐实现梦想。</p>\n<p>恭喜Deft在十年的职业生涯最后拿到了属于自己的世界总冠军。</p>\n<h2 id=\"梦想\">梦想</h2>\n<p>这场比赛打的非常的精彩，从观众的角度上来讲，完全是一把视觉盛宴；从选手的角度上来讲，是一场需要拼尽全力的梦想争夺之战；</p>\n<p>非常佩服那些能够为梦想执着奋斗的人，孤独又纯粹，可是一旦当你达到了梦想中的那个目标，将会拥有难以想象的愉悦和兴奋，那种手都在不停颤抖的兴奋。</p>\n<h2 id=\"人生\">人生</h2>\n<p>人生需要梦想吗？</p>\n<p>我觉得是需要的，可是需要再不抛弃生活的前提下努力实现自己心中的梦想。</p>\n<blockquote>\n<p>绝对不能为了梦想，而抛弃了家庭和生活，这是绝对不允许的。</p>\n</blockquote>\n<p>如果你心中也曾经有梦想，还能想起来吗？愿意坚持吗？想为自己平淡无奇的人生拼一把吗？去吧，不要想太多，在保证不浪费自己的时间的前提下努力享受拼搏的过程。</p>\n<h2 id=\"感想\">感想</h2>\n<p>或许你曾经也尝试奋斗过，可是最后放弃了，可我相信这是所有成功者必须要经历的路程。</p>\n<p>都会是跌倒再爬起来，再跌倒再爬起来，重复这个过程，最后才走到了终点。</p>\n<p>所以，放弃了，不可怕，可怕的是不敢重新再来。</p>\n<blockquote>\n<p>昨天我知晓了庄老师从华为<strong>退休</strong>（才四十岁），准备去读博士，这份精神令人非常振奋和崇拜。</p>\n</blockquote>\n<h2 id=\"最后\">最后</h2>\n<p>送给你们，也是送给自己：战至终章，永不言弃。</p>\n","categories":["thoughts"],"tags":["thought","life-long-learning","dream"]},{"title":"拖延症","url":"https://wj-mcat.github.io/2022/10/13/thoughts/procrastination/","content":"<p>拖延症是一个可怕的词，那么它肯定是一件坏事情呢？</p>\n<p>大多数写拖延症的文章都是介绍如何治愈它。但严格来说，这是不可能的。比如客观情况下你需要处理很多事情，无论是在主观还是客观的影响下，在有效的时间中没办法处理完这些事情，此时拖延避免不了，并是一件看似很合理的事情。</p>\n<span id=\"more\"></span>\n<p>此时面对拖延，怎么做至关重要，根据处理方式不同，可分为一下三种情况：</p>\n<p>拖延症往往不是针对于某一些事情，而是针对于所有类型的事情都存在一定的拖延，所以此时就是：对人不对事了。那此时面对即将要拖延的事情列表，根据对待拖延症的态度，通常有如下表现：</p>\n<ul>\n<li>A:什么都不做</li>\n<li>B:选择做不那么重要的事情</li>\n<li>C:选择更重要的事情来做</li>\n</ul>\n<p>当然，在即将要拖延的时候，第三种选择毋庸置疑是最优的。</p>\n<blockquote>\n<p>这或许跟《重要紧急四象限法则》类似，始终做最重要紧急的事情。</p>\n</blockquote>\n<p>而通常做一件事有挑战性的事情时，会进入一种心流状态，这就好比如“心不在焉的教授”，当他在思考一些有趣的问题时，他会忘记刮胡子，忘记吃饭，甚至忘记看他要去哪里。他的大脑脱离了日常世界，因为他在另一个精神世界里努力工作。</p>\n<p>这是我认为给拖延症最有价值的诠释，而这就是典型C类拖延症患者：拖延做小事，转而做大事。</p>\n<h2 id=\"拖延小事，转头做大事\">拖延小事，转头做大事</h2>\n<p>那什么是小事呢？粗略的讲就是对于你而言产生不了任何长期好影响的事情，比如说打一把王者、看一个肥皂剧更或者看一个游戏直播等；那大事可能就是写一篇博客、把放了好几天的袜子洗了或者看几页冷落许久的书籍等。</p>\n<blockquote>\n<p>在此强调一下，生活大于一切，整理好家务，给家人做一顿好饭，陪陪家人这都是很有意义的事情。并不推荐大家在追求自我时抛弃生活。</p>\n</blockquote>\n<p><strong>好的拖延就是避免做低效、意义不大的事情，专注于做真正有用的事情。</strong></p>\n<p>如果我们用重要紧急四象限法则来区分小事和大事的话，那就是：不重要不紧急的事情就是小事，其余三个象限的就是大事。比如说周末跑步健身这就是重要不紧急的事情，洗一洗放了好几天的袜子这就是紧急不重要的事情，临近考试的复习这就是重要且紧急的事情。</p>\n<p>大家可以把自己日常生活中的活动分为这两类事情，然后建议大家尽量多的做大事，小事可以继续<strong>拖延</strong>。</p>\n<p>推迟一些小事是由意义的，因为真正有用的事情，往往需要两件事情：大量的时间和合适的心情。需要让小事给大事腾出更多的时间从而更好的深入执行。</p>\n<h3 id=\"防止焦虑\">防止焦虑</h3>\n<p>专注于当下最重要紧急的事情，可以放置焦虑的产生。</p>\n<p>焦虑的产生通常是由于『一件重要而且需要花一定时间的事情没有完成』导致，比如说临近考试可是还没有怎么复习。可是你永远不会由于因为一把王者晋级赛没有打而焦虑。</p>\n<p>所以『始终专注于当下最重要且紧急的事情』，能够解决未来最有可能焦虑的事情，于是就防止了焦虑的产生。</p>\n<h3 id=\"不喜欢重要紧急的事情\">不喜欢重要紧急的事情</h3>\n<p>如果一个人始终按照重要且紧急的事情来行事，那说明很自律，可是我相信大部分的人都是周期性自律，因为人性总是有偷懒的成分，当感觉到很累的时候，就想懒一懒，等状态调整好之后再来自律。</p>\n<p>所以，当你不喜欢当下重要紧急的事情的时候，你可以稍微懒一懒，做一做那些重要不紧急或者，紧急不重要的事情都是可以的。</p>\n<p>可是，记住要尽量少做那些不重要且不紧急的事情，因为这些只会给未来积累焦虑。</p>\n<p>TODO: 针对于此论点进行讨论</p>\n<p>整篇文章印象很深刻的观点：</p>\n<ul>\n<li>始终做更重要的事情，让小事给大事让路</li>\n<li>在学习上，始终研究该领域最重要的问题，并长期投入其中</li>\n</ul>\n<h2 id=\"扩展\">扩展</h2>\n<ul>\n<li>和紧急重要的方法论进行对比\n<ul>\n<li>和to-do list类似，重要紧急的方法更适用于工作当中，并非是长期的个人成长</li>\n</ul>\n</li>\n<li>好的拖延和todo-list之间的关系\n<ul>\n<li>前者是针对于长期的事情</li>\n<li>to-do list是针对于短期而言，特别是在工作当中是需要</li>\n</ul>\n</li>\n</ul>\n<p>翻译自：<a href=\"http://www.paulgraham.com/procrastination.html\">Good and Bad Procrastination (2005)</a></p>\n","categories":["thoughts"],"tags":["自律"]},{"title":"来自吴恩达的一封信：《如何打造AI职业规划》","url":"https://wj-mcat.github.io/2022/10/11/thoughts/a-letter-from-andrew/","content":"<p>亲爱的朋友们：</p>\n<p>人工智能的迅速崛起导致了人工智能工作岗位的迅速增加，许多人正在这一领域建立令人兴奋的事业。职业生涯是一段长达数十年的旅程，道路并不总是一帆风顺的。多年来，我有幸看到成千上万的学生和工程师在大大小小的公司从事人工智能领域的工作。在这封信和接下来的几封信中，我想分享一些想法，这些想法可能对你制定自己的路线图有所帮助。</p>\n<p>职业发展的三个关键步骤是学习(获得技术和其他技能)，从事项目(加深技能，建立作品集，创造影响力)和找工作。这些步骤相互叠加:</p>\n<ul>\n<li>最初，你专注于获得基本的技术技能。</li>\n<li>在获得基本技能之后，你就会投入到项目工作中。在此期间，你可能会继续学习。</li>\n<li>之后，你可能偶尔会去找工作。在整个过程中，你可能会继续学习和从事有意义的项目。</li>\n</ul>\n<p>这些阶段适用于广泛的职业，但人工智能涉及独特的元素。例如:</p>\n<p>人工智能尚处于萌芽阶段，许多技术仍在发展中。虽然机器学习和深度学习的基础正在成熟——而课程作业是掌握它们的一种有效方式——但在这些基础之外，与不断变化的技术保持同步，在AI领域比那些更成熟的领域更重要。<br>\n项目工作通常意味着与缺乏AI专业知识的涉众合作。这使得找到一个合适的项目，估计项目的时间线和投资回报，以及设定预期都具有挑战性。此外，AI项目的高度迭代特性导致了项目管理中的特殊挑战:当你事先不知道需要多长时间才能达到目标精度时，你如何提出构建系统的计划?即使在系统已经达到目标之后，可能还需要进一步的迭代来处理部署后的漂移。<br>\n虽然在人工智能领域找工作与在其他行业找工作相似，但也有一些区别。许多公司仍在努力弄清楚它们需要哪些人工智能技能，以及如何雇佣拥有这些技能的人。你做过的事情可能和面试官看到的有很大的不同，你更有可能需要向潜在的雇主传授你工作的一些元素。</p>\n<p>在这些步骤中，一个支持性的社区是一个很大的帮助。拥有一群可以帮助你的朋友和盟友——你也努力去帮助他们——会让这条路变得更容易。无论你是刚刚迈出人生的第一步，还是已经在这条路上走了很多年，都是如此。</p>\n<p>我很高兴能与你们所有人一起发展全球AI社区，这包括帮助我们社区中的每个人发展他们的职业生涯。在接下来的几周里，我将更深入地探讨这些话题。</p>\n<p>不断学习!</p>\n<p>Andrew</p>\n<ul>\n<li><a href=\"https://www.deeplearning.ai/the-batch/how-to-build-a-career-in-ai-part-1-three-steps-to-career-growth/\">how-to-build-a-career-in-ai-part-1-three-steps-to-career-growth</a></li>\n</ul>\n","categories":["thoughts"],"tags":["opensource","职业规划"]},{"title":"Cmake基础入门","url":"https://wj-mcat.github.io/2022/09/25/cpp/cmake/","content":"<h2 id=\"基础概念\">基础概念</h2>\n<ul>\n<li><code>add_library</code></li>\n</ul>\n<p>作用：用来针对于某一个模块编译成一个子模块，这是最小模块的编译</p>\n<p>优点：可以按照模块来编译对应的模块，可以加快编译的速度，让目录更加清晰</p>\n<p>缺点：</p>\n<ul>\n<li>ldd</li>\n</ul>\n<p>作用：用来显示某一个执行库的所有依赖项</p>\n","categories":["cpp"],"tags":["cpp","cmake"]},{"title":"深入理解Transformer（一）： 基础","url":"https://wj-mcat.github.io/2022/09/12/nlp/transformer/01-basic/","content":"<p><a href=\"https://arxiv.org/abs/1706.03762\">Transformer</a>在2017年被提出时，作为一种序列转换工具将一个序列转换为另一个符号序列，最流行的例子是翻译，比如从英语到德语。它还被修改为执行顺序完成-给定一个启动提示，以相同的脉络和风格进行。它们已迅速成为自然语言处理领域研究和产品开发不可或缺的工具。</p>\n<p>在此序列文章当中，我将从底层矩阵运算和梯度回传等细节讨论，甚至会把公式和代码对照着来讲解，此外还会介绍Transformer中常见的应用，当下流行不同预训练模型的差异化对比等。</p>\n<span id=\"more\"></span>\n<h1>Transformer 整体结构</h1>\n<p>为了让大家整体性的了解Transformer，我们先来看看模型结构图：</p>\n<p><img src=\"/images/2022/transformer/model-architecture.png\" alt=\"\"></p>\n<ul>\n<li>从模型组成部分上来看，主要是Embedding、Multi-Head Attentiony、FeedForward以及常见的Norm、Linear等组成部分。</li>\n<li>从结构上看，可分为Encoder和Decoder模型</li>\n<li>从模型类型上来看，可分为Encoder-only、Decoder-Only以及Encoder-Decoder等模型。</li>\n</ul>\n<p>以上每一个模块可讲的内容都比较多，接下来我将尽可能的细化知识点，用通俗易懂的描述来介绍Transformer。</p>\n<h2 id=\"模型组成\">模型组成</h2>\n<p>从整体上来看，模型主要分为：输入、Encoder、Decoder、输出以及最终概率输出五个部分组成。</p>\n<ul>\n<li>输入是指Encoder的输入，主要分为：Token Embedding、Position Embedding、Token Type Embedding。</li>\n<li>Encoder和Decoder在模型结构上一致，都是由多成TransformerLayer组成\n<ul>\n<li>而TransformerLayer又是由MultiHead Attention + 残差网络组成</li>\n<li>MultiHead Attention又是由 SelfAttention组成</li>\n</ul>\n</li>\n<li>Decoder在输入上与Encoder不太一样，后者的QKV保持一致，所以是SelfAttention、前者Q来自于Encoder，KV来自于Decoder的输入</li>\n<li>最终概率输出是在模型做预训练时才会使用到数值</li>\n</ul>\n<h2 id=\"模型结构\">模型结构</h2>\n<p>从结构上来看，主要分为Encoder和Decoder，前者主要是编码原始序列，比如汉语文本，后者编码目标序列，比如英语文本，以此可对两个序列进行文本翻译，实现一个序列转另外一个序列的功能。</p>\n<p>顾名思义，Encoder主要是做语义编码的作用，可对文本语义做深度编码，比如Bert；Decoder主要是做解码作用，可解码成目标文本序列、语音甚至是图像都是可以的。</p>\n<h2 id=\"模型类型\">模型类型</h2>\n<p>在Transformer-Based模型上来看，可将模型分为三种类型：Encoder-Only、Decoder-Only以及Encoder-Decoder模型。</p>\n<ul>\n<li>Encoder Only</li>\n</ul>\n<p>Encoder模型是BiDirectional、通常基于SelfAttention构建，且只能够编码语义，然后用于下游任务，比如：自然语言理解，文本分类，目标词预测，问答预测，文本情感分析，序列标注等等，而此类任务对于抽取某一个领域的信息十分在行，一般通过fine-tune之后能够达到很好的效果。</p>\n<p>代表模型有: BERT、RoBERTa、ALBERT。</p>\n<ul>\n<li>Decoder only</li>\n</ul>\n<p>Decoder模型是uni-directional，也就是单向的，为自回归模型，</p>\n<p>代表模型有：T5, AlphaCode, Switch, ST-MoE, RETRO</p>\n<ul>\n<li>Encoder-Decoder</li>\n</ul>\n<p>什么时候该使用Encoder-Decoder模型？做序列到序列的任务时，文本摘要，机器翻译等等；Encoder和Decoder之间的权重并没有共享；输入的分布和输出的分布不属于与同一个类别，如文本和图像的分布。</p>\n<p>代表模型有：Dec-only: GPT-{1,2,3}, {🐭, 🐹}, PaLM</p>\n<h2 id=\"计算逻辑流程\">计算逻辑流程</h2>\n<h1>源码解析</h1>\n<h2 id=\"输入输出\">输入输出</h2>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","categories":["nlp","transformer"],"tags":["nlp","Transformer"]},{"title":"the-rise-of-decoder-only-model","url":"https://wj-mcat.github.io/2022/09/12/nlp/transformer/the-rise-of-decoder-only-model/","content":"<p>Bert是由encoder-only训练而来，T5由encoder-decoder训练而来，不过都是需要有大量的训练语料才能够训练而来.</p>\n<p>近段时间，decoder-only的模型出现的越来越多，比如：GPT-{1,2,3}，google的<a href=\"\">PaLM</a>，此类模型在训练的过程都是单向的：从左到右的语言模型，而其训练目标任务很简单，就是预测下一个token是什么。</p>\n<p>GPT-3的模型训练过程仅仅由decoder组成，并且事实证明此结构的模型能够在少样本领域取得显著的效果，</p>\n<p>原始的transformer模型是由encoder和decoder两个组成部分，分别由多层的Transformerlayer叠加组成，同时此结构能够很好的解决机器翻译任务。</p>\n<p>【介绍机器翻译过程中的计算逻辑。】</p>\n<h2 id=\"到底什么样的模型好\">到底什么样的模型好</h2>\n<p>refer to</p>\n<ul>\n<li><a href=\"https://analyticsindiamag.com/the-rise-of-decoder-only-transformer-models/\">https://analyticsindiamag.com/the-rise-of-decoder-only-transformer-models/</a></li>\n</ul>\n","categories":["nlp","transformer"],"tags":["nlp","Transformer"]},{"title":"Transformer相关技术问题","url":"https://wj-mcat.github.io/2022/09/12/nlp/transformer/faq/","content":"<h2 id=\"Bert为什么没有Decoder模块\">Bert为什么没有Decoder模块</h2>\n<p>Decoder是否存在其实是依赖于预测目标依赖什么数据的？</p>\n<blockquote>\n<p>以下的tokens表示为预测目标</p>\n</blockquote>\n<ul>\n<li>传统的Causal Language Model中，每一个token都是通过前面的tokens而得</li>\n<li>Neural Machine Translation（机器翻译）模型中，每一个token都是通过前面的tokens以及原始文本而来，token都是由decoder生成，而原始文本就需要使用encoder来进行编码。当然也并不是所有的翻译模型都是需要encoder+decoder，也是有设decoder-only的翻译模型，比如<a href=\"https://dl.acm.org/doi/pdf/10.5555/3327757.3327891\">Layer-Wise Coordination between Encoder and<br>\nDecoder for Neural Machine Translation</a></li>\n<li>在Masked Language Model（如BERT等），每一个被Masked掉的token都是由所在文本中的其他未masked的token来进行预测，原始文本和masked token都在encoder当中处理，所以就不需要decoder了，当然在Masked LM当中并没有严格的限制，比如<a href=\"https://arxiv.org/abs/1905.02450\">MASS</a>就是一个Encoder-Decoder的生成式模型。</li>\n</ul>\n","categories":["nlp","transformer"],"tags":["nlp","Transformer"]},{"title":"思考","url":"https://wj-mcat.github.io/2022/09/10/thoughts/how-to-think/","content":"<p><img src=\"/images/2022/time-to-think.jpeg\" alt=\"\"></p>\n<blockquote>\n<p>图片来源于<a href=\"https://simplysuccessful-llc.com/business-success-and-the-art-of-better-thinking/\">business-success-and-the-art-of-better-thinking/</a></p>\n</blockquote>\n<p>人生要学会思考，把控人生，看清周围的人、事、人与人、事与事以及人与事，最后看清过去、现在和未来。</p>\n<p>这句话，很大也很现实。</p>\n<span id=\"more\"></span>\n<p>今天是中秋节，在家里刷完了<a href=\"https://movie.douban.com/subject/2347485/\">《天道》</a>这部电视剧。哭了，因为丁元英和芮小丹知性真挚的感性；悟了，因为佩服丁元英深渊的学识和思考的深度；在思考这个方面，我想我该认真思考一下。</p>\n<p>很佩服丁元英对于世界、人和社会的理解，也能够洞察这其中的规律和心理，我相信世界上这样的人大有人在，不过不是一朝一夕能够达成的高度，而是需要经过长时间的积累才能够实现的，比如说经济学、社会学、心理学等不同领域的知识都是需要熟练掌握并形成自己的见解，而这些非常人所能够达成的目标。</p>\n<p>我们都佩服优秀的人，并尝试与之考起，古代的王阳明和孟子如此，现代迷惘的一代亦是如此，想去靠齐是成为优秀的前提，而坚持是秘诀，<strong>思考</strong>是心法。</p>\n<p>在此文章中，我想与大家讨论的是<strong>思考这件事情</strong>。</p>\n<h2 id=\"话题\">话题</h2>\n<p>为了探讨不同阶段的思考，我将从以下三个方面来聊一聊思考：</p>\n<ol>\n<li>你，愿不愿意思考？</li>\n<li>你，会不会思考？</li>\n<li>如何提升思考的深度？</li>\n</ol>\n<h2 id=\"你，愿不愿意思考\">你，愿不愿意思考</h2>\n<p>在我们还是小孩子的时候，只会根据本能去思考面临的事情，比如上学、交朋友、接受来自父母的爱等等，很少会出现主动去思一类问题的现象；当我们慢慢长大，接触到这个丰富多彩的世界，读了很多书，了解到一些经济、社会以及人文的现象，这个时候我们会产生很多问题，比如现代教育的弊端、社会的内卷、我想要的生活、我理想中的伴侣等等，有些人会选择直接忽略，毕竟会消耗大量能量和时间（不会产生多巴胺，往往是一个痛苦的过程）；有些人会由于一些问题萦绕在心头，久久不能忘怀，于是想办法去寻找答案，有些能找到，有些找不到，可最终还是处于解决问题和发现问题的循环当中；而经过时间的锤炼，相信有些人大部分的问题都得到了答案，甚至看清楚了本质，这种人即得到了大智慧。</p>\n<blockquote>\n<p>大智慧就是能够看清事情的本质。</p>\n</blockquote>\n<p>从忽略问题到看清楚本质，这是一个金字塔模型，其中最底层忽略问题，避免主动消耗能量，避免痛苦，此类人占据着社会的绝大多数；越往上走，选择忽略问题的概率减小，探寻问题的概率增加，而最终能够走到金字塔顶端的人少之又少。而你想要成为这样的人吗？</p>\n<p>你愿不愿意思考这个问题，就是你愿不愿意去探寻答案过程，而且问题数量会随着你掌握知识的增加而增加，这就像是一个圆，周长越大所接触到的未知就越大，所以此时你需要问自己：你愿不愿意去探寻你所面临的一些问题？</p>\n<p>当然，愿意思考是一件事，会不会思考又是另外一件事，因为思考也是需要技巧的。</p>\n<h2 id=\"你，会不会思考\">你，会不会思考</h2>\n<p>确定点说是：该如何思考？</p>\n<p>思考和学习两者紧密相连，学习是需要通过思考完成和升华的，而思考往往可在学习之后进入另外一种境界。所以思考和学习是相辅相成，爱思考的人通常是爱学习的，爱学习的人通常是会思考的。</p>\n<p>为什么说是会思考？那是因为在学习的过程中会不断总结思考经验，并结合自身的思维模式和习惯构建一套属于自己的思考方式，有的人没注意到如何思考，有的人会主动思考自己是如何在思考，这个过程就已经将人与人给区分开了。所以该如何思考，基础要求就是：多学习。只有多学习，扩充知识面，才会接触到更加更多未知的问题，激发自己探索未知的欲望，此时思考会被不断打磨，一遍遍纠正，最终形成一条高效的思考通路，该如何思考这个问题就迎刃而解。</p>\n<p>这里我并没有介绍思考的方法，因为这个问题太大，涉及到生物学、心理学等不同领域的知识，现在的我并没有这个能力将这个谜团给一一拆开，我只知道：干就完事了。话糙理不糙，因为各种方法最终还是需要通过一遍遍的实践来完成，只不过在这个实践的过程中，一定要注意一点：不需要思考自己是如何思考的，然后才可以了解到自己在思考上的优缺点。</p>\n<p>如何思考，这是一个人与生俱来的本能，可是思考也是有技巧有深浅的，有的人能够一眼看到几天后、几个月后甚至是几年后即将发生的事情，而这样的深度的思考是我们常人所不能企及的。</p>\n<h2 id=\"如何提升思考的深度\">如何提升思考的深度</h2>\n<p>其实这个话题定的有点太高深了，我希望几年后的我能够回过头来继续思考一下此问题。</p>\n<p>提升思考的深度这个话题是从《天道》中的丁元英而来，其深谋远虑的策划让众人佩服，也让屏幕前的我激动不已，因为我相信这个世界上这样的人大有人在，而我应该也可以成为这样的人，我相信我可以。</p>\n<p>就拿其中创办音响公司从头到尾，丁元英从从手续到人与人的心理矛盾都思考的很全面，甚至从公司建立之初就已经想象到后面的官司，也想象到后面会胜诉甚至是成为一个行业内的龙头老大。这其中是需要经过大量的调研和思考，每一个过程都需要把人、事、人与人之间的矛盾都思考清楚，细节之多是我等无法想象，可是确实是都能够想象得到。</p>\n<p>都说艺术是夸张的表达方式，甚至是神化了男主，那我们把这种夸张的程度缩小一点其实也是很厉害的一种人物，可我相信这个世界上不缺少这样的人，至少从思考的深度上来看，这个人肯定是值得我们学习的。即使达不到电视剧中那种程度，也尽量靠齐。</p>\n<p>那如何做到深谋远虑呢？</p>\n<p>首先大前提就是需要你静下来，花时间针对于一件事情好好思考。这件事情无论是简单还是复杂，安安静静的坐下来，全面回顾问题并衡量优缺点，这会让你更加全面的认识到此问题，而正确的认知是能够客观正确解决问题的前提；</p>\n<p>其次<strong>尽量从多个不同的思考来思考问题</strong>。这件事很难，因为个人的认知有限，通常只能够从局部来看待问题，并不一定和客观事实相符，而此时想要解决此问题，无非有两种方法：</p>\n<h3 id=\"与其他人讨论，从其他人贡献不同角度的看法。\">与其他人讨论，从其他人贡献不同角度的看法。</h3>\n<p>这与群臣献策、董事开会无异，都是要各抒己见，然后从中选取出都认可的解决方案，此时的答案方向基本上和客观事实很接近了。或许这就是为什么那些老板总是喜欢开会，因为开会的过程是一个讨论的过程，从公司各位高管的角度出发来讨论出更符合公司发展的解决方案。这类方法比较适合大型团队管理，集思广益和民主管理。</p>\n<h3 id=\"没人一起讨论，那就丰富自我，自己和自己讨论。\">没人一起讨论，那就丰富自我，自己和自己讨论。</h3>\n<p>这件事情看起来很可怕，是否有精神分裂之嫌，可是我想说的是：先丰富自我，再才可以自己和自己讨论。</p>\n<p>要成熟全面的思考一件事情，特别是涉及到人与人之间的事情，就需要了解心理学；如果涉及到社会关系，就需要了解经济学和社会学，这些并非是一朝一夕能熟练掌握，需要在业余时间里用书籍丰富自己的内心，强化认知能力，这样才能够针对与小事情有更深刻的见解，积小成多即可对所谓的大事情有更加深入的观点。</p>\n<p>而没人一起讨论的时候占据着生活的绝大多数，所以丰富自我才是最根本的途径。换句话说，如果你想要朋友跟你一起讨论深刻的问题，你自己必须得拥有深刻的认知，否则在不平等的条件下沟通强行沟通，这是一种强盗行为。</p>\n<h2 id=\"结语\">结语</h2>\n<p>思考是作为成年人需要熟练掌握的一项技能，也是一个了解自己、社会的途径。成年人的幸福并不再来自于一个棒棒糖和游戏，更多的是来自于丰富的内心以及内心的平静。</p>\n<p>如果能够通过学习和思考提升我们在小事情上的判断能力，足矣。</p>\n","categories":["thoughts"],"tags":["thought","life-long-learning"]},{"title":"Wechaty UI QuickStart","url":"https://wj-mcat.github.io/2022/08/14/wechaty/wechaty-ui-quickstart/","content":"<p>Wechaty UI能够让开发者为自己的插件编写对应的UI，从而实现交互式界面，这篇文章将要介绍如何使用为插件编写对应的UI。</p>\n<span id=\"more\"></span>\n<h1>QuickStart</h1>\n<p>在这里将带着各位开发者实现一个：从server端获取点击数量的前后端交互界面功能。功能展示如下所示：</p>\n<p><img src=\"/images/2022.08/simple-ui.gif\" alt=\"\"></p>\n<h2 id=\"安装\">安装</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> wechaty<span class=\"token operator\">>=</span><span class=\"token number\">0.9</span>.dev8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>注意，最新版本目前还正处于活跃测试中，详细可见<a href=\"https://pypi.org/project/wechaty/#history\">wechaty in pypi</a>，大家有任何问题都可以提issue来共建这个wechaty-ui的功能。</p>\n</blockquote>\n<h2 id=\"编写插件基类\">编写插件基类</h2>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> quart <span class=\"token keyword\">import</span> Quart<span class=\"token punctuation\">,</span> render_template_string<span class=\"token punctuation\">,</span> jsonify\n<span class=\"token keyword\">from</span> wechaty <span class=\"token keyword\">import</span> WechatyPlugin\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterPlugin</span><span class=\"token punctuation\">(</span>WechatyPlugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 需要和blueprint注册的UI入口地址一致</span>\n    VIEW_URL <span class=\"token operator\">=</span> <span class=\"token string\">'/api/plugins/counter/view'</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">blueprint</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">:</span> Quart<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        \n        <span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/plugins/counter/view'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_counter_view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            \n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src/plugins/views/table.jinja2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># with open(\"./src/plugins/views/vue.html\", 'r', encoding='utf-8') as f:</span>\n                template <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            \n            self<span class=\"token punctuation\">.</span>setting<span class=\"token punctuation\">[</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n            response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> render_template_string<span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">,</span> count<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>setting<span class=\"token punctuation\">[</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> response<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此插件中需要注意如下几个地方：</p>\n<ul>\n<li><code>VIEW_URL</code>: UI 页面加载的入口，此属性必须和<code>blueprint</code>中注册的view路由保持一致。</li>\n<li><code>blueprint</code>: 此函数传递一个Quart对象以此注册全局路由来处理不同UI逻辑，此过程与flask的路由注册逻辑保持一致。</li>\n<li><code>view</code>入口（<code>get_counter_view</code>函数）:  返回的内容需要是浏览器可识别的元素即可，可为：字符串、html代码、jinja2 渲染数据之后的数据（也是字符串）。</li>\n</ul>\n<h2 id=\"添加UI代码\">添加UI代码</h2>\n<pre class=\"line-numbers language-django\" data-language=\"django\"><code class=\"language-django\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>来自于服务器的数据<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">for</span> <span class=\"token variable\">item</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">tables</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;&#123;</span><span class=\"token variable\">item</span><span class=\"token delimiter punctuation\">&#125;&#125;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token tag keyword\">endfor</span> <span class=\"token delimiter punctuation\">%&#125;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"启动机器人\">启动机器人</h2>\n<p>通过以上两个步骤即可实现一个：实时统计页面浏览数量的插件。是不是很简单，可是这个实在是太过于简单，接下来我将给大家介绍如何使用vue2编写一个前后端有交互的UI元素。</p>\n<h1>Vue Counter</h1>\n<p>在以上的示例代码中，每次都是通过刷新页面从而得到浏览次数的更新，在这个功能中只需要通过按钮即可实现浏览次数的新增，理论上只需要作如下几个地方的调整即可：</p>\n<ul>\n<li>在插件中添加前后端交互的接口函数：<code>get_ui_counter_view</code></li>\n<li>添加vue代码</li>\n</ul>\n<p>此示例代码的结果界面如下所示：</p>\n<p><img src=\"/images/2022.08/simple-vue-ui.gif\" alt=\"\"></p>\n<h2 id=\"Vue-Counter-Plugin\">Vue Counter Plugin</h2>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UICounterPlugin</span><span class=\"token punctuation\">(</span>WechatyPlugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 需要和blueprint注册的UI入口地址一致</span>\n    VIEW_URL <span class=\"token operator\">=</span> <span class=\"token string\">'/api/plugins/ui_counter/view'</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">blueprint</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">:</span> Quart<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        \n        <span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/plugins/ui_counter/view'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_ui_counter_view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            \n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src/plugins/views/vue.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                template <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> template\n        \n        <span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/plugins/ui_counter/count'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_ui_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>setting<span class=\"token punctuation\">[</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>setting<span class=\"token punctuation\">[</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Vue-Counter-UI\">Vue Counter UI</h2>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>refresh<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Click<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Count: &#123;&#123;count&#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">data</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> $<span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/plugins/ui_counter/count\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          $<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data\n          \n          $<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">\"点击量+1\"</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上代码代码展示了如何使用vue来编写最小版本的前后端交互代码，如果各位开发者想要实现更加复杂的前后端交互方式，可直接使用<a href=\"https://github.com/PanJiaChen/vue-admin-template\">vue-admin-template</a>构建。</p>\n<h1>文档</h1>\n<h2 id=\"WechatyPlugin\">WechatyPlugin</h2>\n<p>如果要编写插件，必须要继承WechatyPlugin，那如果想要实现自定义业务扩展，则可充分结合插件内提供的功能即可，整体功能分为：消息类型功能和Web服务类型功能。</p>\n<h3 id=\"消息类型\">消息类型</h3>\n<p>顾名思义，每个插件都可以处理来自于机器人的所有消息，如<code>message</code>, <code>friendship</code>等，大家只需要重写对应的<code>on_&#123;event-name&#125;</code>函数即可舍添加对应的消息事件的处理方式。例如：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><div class=\"caption\"><span>preset</span></div><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@message_controller<span class=\"token punctuation\">.</span>may_disable_message</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">on_message</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">:</span> Message<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"ding\"</span><span class=\"token punctuation\">:</span>\n        setting <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>setting\n\n        <span class=\"token keyword\">await</span> msg<span class=\"token punctuation\">.</span>say<span class=\"token punctuation\">(</span>setting<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'ding'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        message_controller<span class=\"token punctuation\">.</span>disable_all_plugins<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Web服务类型\">Web服务类型</h3>\n<p>这类功能可添加HTTP API的功能，也可以在HTTP服务当中添加UI的功能模块，比如编写VUE的代码，实现前后端数据交互等。</p>\n<blockquote>\n<p>python-wechaty中使用Quart作为Web服务框架：因为它跟Flask一样足够简单，同时python-wechaty注重易用性，对性能要求不高。</p>\n</blockquote>\n<p>当为插件编写了对应的UI服务时，所有的路由注册服务都需要在<code>blueprint</code>这个方法中添加，例如：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">blueprint</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">:</span> Quart<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/plugins/ui_counter/view'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_ui_counter_view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        \n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src/plugins/views/vue.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            template <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> template\n    \n    <span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/plugins/ui_counter/count'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_ui_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"自定义插件元信息\">自定义插件元信息</h3>\n<p>插件中定了标识插件的一些数据字段，提供给Wechaty-UI来识别，字段如下所示：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AUTHOR</td>\n<td>插件作者昵称</td>\n<td>wechaty</td>\n</tr>\n<tr>\n<td>AUTHOR_LINK</td>\n<td>插件作者自我介绍链接</td>\n<td><a href=\"https://avatars.githubusercontent.com/u/10242208?v=4\">https://avatars.githubusercontent.com/u/10242208?v=4</a></td>\n</tr>\n<tr>\n<td>AVATAR</td>\n<td>插件作者头像</td>\n<td><a href=\"https://github.com/wj-Mcat\">https://github.com/wj-Mcat</a></td>\n</tr>\n<tr>\n<td>ICON</td>\n<td>插件Logo</td>\n<td><a href=\"https://wechaty.js.org/img/wechaty-icon.svg\">https://wechaty.js.org/img/wechaty-icon.svg</a></td>\n</tr>\n<tr>\n<td>VIEW_URL</td>\n<td>插件UI入口</td>\n<td>None</td>\n</tr>\n<tr>\n<td>UI_DIR</td>\n<td>插件UI资源文件路径</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>UI_DIR：通常为编译打包之后的资源路径，添加这个之后，框架会自动在这个目录下递归寻找对应的js/css/font等文件，然后返回给前端。</li>\n</ul>\n<h1>总结</h1>\n<p>Wechaty中提供了Web服务功能，故可以通过一个API返回对应的html代码，至于你的html代码使用vue、react还是angular写的都无所谓，只需要最后编译打包成浏览器可识别的html/css/js等代码即可。</p>\n<p>所以，大家可以发挥一下自己的想象，使用python-wechaty即可开发者具备高交互性的插件功能。</p>\n","categories":["wechaty"],"tags":["ui","wechaty"]},{"title":"【量化投资】：入门基础","url":"https://wj-mcat.github.io/2022/08/08/quantization/basic/","content":"","categories":["quantization"],"tags":["opensource","apache-way"]},{"title":"商业开源在Paddle中的进展","url":"https://wj-mcat.github.io/2022/08/08/thoughts/apache-way-in-paddle/","content":"<p>Apache Way 已然成为开源都需要遵循的标准，可是在商业公司的开源方式和常见的开元商业化还是有一定的差别，这篇文章就是来介绍在Paddle中的现状。</p>\n<h2 id=\"Apache-Way\">Apache Way</h2>\n<p>接触过开源的人基本上都或多或少了解过Apache Way，这是一个历经全球几十年开源软件成功发展的标准，也就是说如果想要成功开源，那就遵循Apache Way，最后大概率会开源成功。那究竟什么是Apache Way呢？</p>\n<h3 id=\"准则\">准则</h3>\n<ul>\n<li>开放</li>\n<li>透明</li>\n<li>共享</li>\n</ul>\n<h4 id=\"开放\">开放</h4>\n<h4 id=\"透明\">透明</h4>\n<h4 id=\"共享\">共享</h4>\n<h3 id=\"核心方法\">核心方法</h3>\n<ul>\n<li>社区大于代码：Community Over Code</li>\n<li></li>\n</ul>\n<h4 id=\"社区大于代码\">社区大于代码</h4>\n<h4 id=\"精英治理\">精英治理</h4>\n<h4 id=\"\"></h4>\n<h2 id=\"商业开源的三种形式\">商业开源的三种形式</h2>\n<h2 id=\"Paddle在开源中存在的问题\">Paddle在开源中存在的问题</h2>\n<p>我在PaddleNLP组也已经工作一段时间了，也在观察团队内做事的风格以及与其它开源社区之间的差别。以下是我主观上看到的一些问题，也希望能够与大家共同讨论大型公司商业化开源的道路和方式。</p>\n<h3 id=\"外部开发者不足\">外部开发者不足</h3>\n<p>这句话对也不对。</p>\n<p>对是因为从Contributor上面来看，确实是有很多非Paddle的人在做很多贡献；不对是因为其中有大部分的人是参加黑客松、论文复现赛（完成是有钱的）才参与到贡献当中来，所以拿到钱之后很少有继续<strong>无偿</strong>参与贡献，而且我也遇到了职业参赛选手，半年可以薅十几万的那种，毕竟题目也很简单。</p>\n<p>就我所在的PaddleNLP组，很少有人主动给repo提PR，绝大部分都是组内的人。当然其中也有一些基于兴趣愿意主动参与到其中来，我在入职之前也参与了一些新bug fix的工作，可是没有感受到后续的跟进和鼓励机制，所以基本上就停留在用用的状态。</p>\n<h3 id=\"社区的健康状态\">社区的健康状态</h3>\n<p>如何评判一个社区是否健康呢？</p>\n<ul>\n<li>PPDE要求有点低</li>\n<li>基础设施真的很重要</li>\n<li>与其它社区联动</li>\n<li>会每天统计star的变化</li>\n</ul>\n<h2 id=\"如何做\">如何做</h2>\n<h3 id=\"Open-Bug-List\">Open Bug List</h3>\n<h3 id=\"Welcome-to-Contribute\">Welcome to Contribute</h3>\n<h2 id=\"结语\">结语</h2>\n","categories":["thoughts"],"tags":["opensource","paddle"]},{"title":"开源和商业开源","url":"https://wj-mcat.github.io/2022/08/08/thoughts/apache-way-in-company/","content":"<p>Apache Way 已然成为开源都需要遵循的标准，可是在商业公司的开源方式和常见的开源商业化还是有一定的差别，这篇文章就是来介绍在我在国内某大厂内的商业开源见闻。</p>\n<span id=\"more\"></span>\n<h2 id=\"OpenSource\">OpenSource</h2>\n<p>为了讲清楚这个话题，首先就要先介绍一下什么是开源，常见的开源是怎么玩的？</p>\n<h3 id=\"什么是开源\">什么是开源</h3>\n<p>开源其实很简单，就是开放源代码；开源也不简单，不只是开放源代码，可是目前依然有很多人认为开源就只是把代码Open了，其他人能够用起来，然后轮流安排人来值班回复Issue和微信群里面的问题，至于新功能开发和长期规划基本上都是内部封闭式讨论，其他人是没办法参与到其中来。从这一点来看，其实也并没有开源。</p>\n<h3 id=\"开源，代表着公开透明\">开源，代表着公开透明</h3>\n<p>既然代码都开源了，为什么项目周会和季度周会不也开源出去呢？将这些信息开源出去又什么好处吗？</p>\n<p>这个时候周会不开源分为以下情况：</p>\n<ul>\n<li>没意识到周会也是要开源出去</li>\n<li>觉得周会开源很麻烦，浪费人力成本，还不如不做</li>\n<li>周会上有不可公开的商业信息，没办法开源</li>\n</ul>\n<p>将周会信息公布出去之后有什么好处吗？为了讲清楚这些问题，我需要给大家详细介绍一下Apache Way和一些国内的案例。</p>\n<h2 id=\"Apache-Way\">Apache Way</h2>\n<p>接触过开源的人基本上都或多或少了解过Apache Way，这是一个历经全球二十多年开源软件成功发展的标准，也就是说如果想要成功开源，那就遵循Apache Way，最后大概率会开源成功。这句话听起来神乎其神，其本质还是一套心法和备受认可的功法。</p>\n<p>那究竟什么是Apache Way呢？</p>\n<h3 id=\"准则\">准则</h3>\n<p>Apache Way有多个准则，我主要罗列其中四点：</p>\n<ul>\n<li>社区大于代码（Community Over Code）</li>\n<li>邮件列表讨论（Open Email List）</li>\n<li>精英民主（管理机制）</li>\n<li>异步工作（Working with Global Developers）</li>\n</ul>\n<h3 id=\"社区大于代码\">社区大于代码</h3>\n<p>顾名思义，社区比代码代码还要重要。不过也是有一定的前提：项目已然有一些稳定版本发布，主要的功能模块是测可用的情况下。不然项目甚至都还没有做，然后就来维护社区，然后就拉一群人来从零开始做一个项目，这不是忽悠人吗？也很少有人愿意来做这件事情，不过我也相信也不乏这类的情况，可能创始人背景太过于强大，会有很多慕名而来的人因为这个人和想法一起来从零开始做。</p>\n<p>扯远了，回过头来，当项目已经初具规模，这个时候维护好开源社区是非常重要，原因如下：</p>\n<ul>\n<li>创新来源于社区</li>\n<li>贡献来源于社区</li>\n<li>可持续性来源于社区</li>\n</ul>\n<h4 id=\"创新来源于社区\">创新来源于社区</h4>\n<p>社区的开发者往往来自于五湖四海，各行各业，并都有使用项目的意愿和独特应用场景。这对于开源社区来说是具备巨大潜力的资源。</p>\n<p>首先，那些开发者既然是加入到本社区里面来，肯定是觉得可以应用在他们业务场景当中，遇到问题也希望能够得到尽快找到解决方案，这样他们也可以在往项目成功运行一步步迈进。</p>\n<blockquote>\n<p>当然，在这里先抛一个重点：如何让他们尽快找到解决方案是很关键的一点。</p>\n</blockquote>\n<p>其次，每个开发者的业务场景都有其独特之处，大部分都可以基于现有的功能模块组合而成，少数部分业务需要提供一定的扩展才能够更好的解决他们的业务。此时，<strong>这些扩展</strong>或许就能够成为项目发展的关键点和创新点。</p>\n<p>当然，不是说开发者所提出的所有建议社区都是需要采取，而是需要走类似于企业审批的过程：PMC 投票决定此功能是否有必要加入到项目中来，而且整个社区的人都可以参与到投票中来，这样是不是更加民主呢？</p>\n<p>所以，社区的人才是创新的关键，创新也是来源于社区。</p>\n<h4 id=\"贡献来源于社区\">贡献来源于社区</h4>\n<p>上面提到了会有少部分人觉得：如果能够添加XX功能就更好了，同时还会有一些人愿意主动给出自己的提案和解决方案的思考，如果稍作一些引导，此类开发者便可以成为社区的Contributor，我也相信会有很多人<strong>热爱写代码，热爱贡献</strong>，如果社区一旦发现此类的人，应该重点跟进和维系，并采用开源社所推荐的<a href=\"https://www.bilibili.com/read/cv13012086\">推坑文化</a>，其本质上是一个<strong>用认可鼓励成长</strong>的方法。</p>\n<p>所以，维系好那些积极的，具备一定热爱的人，来自社区的贡献自然而然就来了。如果此类人的数量多起来了，这相比于公司直接雇一群人来做这件事情而言，会更有长期的价值。</p>\n<p>此外，社区会不断有新鲜血液进来，推坑文化也可以保证社区的活跃程度，以及源源不断的贡献。</p>\n<h4 id=\"可持续性来源于社区\">可持续性来源于社区</h4>\n<p>这一点其实已经从侧面聊过了，只有维系好社区以及社区的管理制度，社区就会形成一个良性循环，社区人数的增加也会推动创新和贡献不断增长，所以为了实现这一点，最重要的一个前提是：社区的管理制度以及如何维系好开源社区。</p>\n<p>说了这么多，我想大家都已经认识到社区的重要性不比代码低，甚至更甚。可是如何真正管理好社区以及让社区更健康？这也是一个重要的话题。</p>\n<h3 id=\"邮件列表讨论\">邮件列表讨论</h3>\n<p>不知道大家对于邮件是否都停留在注册账号激活、绑定某些账户以及各种垃圾邮件等层面中。不过已经进入职场的人甚至是进入管理层的人，会对邮件比较习惯：小组或部门通知基本上都是基于邮件，不过其中的技术讨论极少之又少。</p>\n<h4 id=\"什么是邮件列表讨论\">什么是邮件列表讨论</h4>\n<p>邮件列表的发送对象往往是有一个组的概念，在这个组里面的人都可以接收到相关邮件。如果你发了一封提问邮件，这个时候所有的人都会接收到这个邮件，然后回复者的邮件也会被这个组的所有人都看到。</p>\n<h4 id=\"为什么邮件列表这么重要\">为什么邮件列表这么重要</h4>\n<p>那这种方式有什么好处呢？为什么要推荐这种方式呢？</p>\n<p>首先，这对于提问者和回复者都有一定的要求：</p>\n<ul>\n<li>提问和回复已经描述的足够清楚，能够让所有人都能够直接抓住重点</li>\n<li>我的提问是否有价值，是否在经过一定的努力之后还是没有找到解决方案（这个时候一定程度上还是由于项目文档没有做好导致的）</li>\n<li>我的回复是否能够解决他的问题，如果不能，是否能够快速通过最少的询问抓住核心问题</li>\n</ul>\n<p>由于邮件列表是在公开的地方进行讨论，发送者会对编写的邮件内容非常谨慎，必须是<strong>经过思考</strong>之后的结果。而这种必须经过深入思考之后提问和回复才能够倒逼他们遵循：提问的艺术和回复的艺术。</p>\n<p>Apache 相关的项目都推荐使用此类方法来进行重要事情的沟通，也是一种相对高效的方式。</p>\n<p>此外，此类方法无论是针对于提问者还是回复者都可以提升自我的曝光度，增加在团队内部的信誉度和知名度。</p>\n<p>可是，此类方法在国内却行不通，这也是有一定的文化因素和互联网背景的。</p>\n<h4 id=\"中国开发者之间的沟通方式\">中国开发者之间的沟通方式</h4>\n<p>我见过太多的开发者，想要咨询问题基本上都是拉小群来进行讨论，然后让社区维护者就有了无数个小群，这对于他们而言是一件很恐怖的事情。</p>\n<p>为什么说是一件很恐怖的事情呢？原因有三：</p>\n<ul>\n<li>群聊太多，导致需要挨个挨个儿去维护群关系和事情，特别是每个群聊的内容都不一样。</li>\n<li>群聊太多，很多都是问的同一个问题，然后每个群都要私聊回复一遍，这件无聊的工作量将要重复无数次。</li>\n<li>群聊太多，导致信息不共享，这将没有办法导致信息的有效传递，将会逐渐让社区进入一个恶性的环境当中，没有办法形成自我更新和成长，这也是以上两个问题的关键。</li>\n</ul>\n<p>所以说，在公开的地方沟通，所有的信息都是共享，这将会给社区形成一个健康的良性循环，帮助开发者快速解决问题，从而形成更快的反馈链，甚至从侧面增加产品的迭代。</p>\n<p>以上现象的形成，是有一定的原因：国内大部分用户基于微信沟通过，而微信是一个极其封闭的环境。</p>\n<p>微信是一个群人数上限只有500人，群管理人员最多只有三人的IM平台，新加入的群成员没法看到历史聊天记录，也只能在人数上限只有500人的群里面来沟通。国内很多开源社区运营人员动辄都有好几十个微信群需要去维系管理，而且不同微信群都在问同一个问题，运营人员需要挨个儿去回复一遍，这是一件枯燥且没有意义的事情。可是并没有办法解决此问题，因为是在微信生态上来做。</p>\n<p>不过，我给大家推荐开源社的一个项目：<a href=\"https://github.com/kaiyuanshe/osschat\">OSSChat</a> 。</p>\n<h4 id=\"所有的事情都公开\">所有的事情都公开</h4>\n<p>源代码其实是最基础的，更多的还是：</p>\n<ul>\n<li>问题讨论</li>\n<li>项目会议视频 &amp; 项目会议记录</li>\n<li>新功能融入投票</li>\n</ul>\n<p>只有足够开放，其他开发者才能够有途径了解到项目的实际情况，从而产生兴趣进行贡献。</p>\n<p>开源社区如果想要更多的开发者进行贡献，一个大前提就是得给开发者提供足够的文档和渠道，从而让其逐步进入贡献的流程中来，同时还需要保证开发者在上手的过程中，不同的问题都是能够有迹可循，无论是在官网论坛还是github issue当中，只要是能够找到对应解决方案。</p>\n<p>如果参与贡献的开发者数量多了之后，会存在一个管理的问题，而Apache Way推进使用精英治理的方式来管理。</p>\n<h3 id=\"精英治理\">精英治理</h3>\n<h4 id=\"什么是精英治理\">什么是精英治理</h4>\n<blockquote>\n<p>谁的贡献越大，谁的指责越大。</p>\n</blockquote>\n<p>如果一个开发者给社区做了很多贡献，则他理应成为社区的更为高级的管理者，按照不同的title划分，有如下几个类型：</p>\n<ol>\n<li>Contributor(代码贡献者)</li>\n<li>Committer(项目委员会)</li>\n<li>Maintainer(项目拥有者)</li>\n<li>PMC Member(项目管理办公室成员)</li>\n<li>PMC Chair(项目管理办公室主席)</li>\n</ol>\n<p>每一个级别都会随着贡献的增多而提升，这个跟公司的职级晋升也是有一定的类似。</p>\n<p>这是一种公平且有益于社区健康发展的良性机制，一旦开发者获得了某种title，将永不会除名，这也保证了开发者的贡献是永久有效，不会随着贡献频率的降低而消失。</p>\n<h4 id=\"职责大于权力\">职责大于权力</h4>\n<p>这种机制和公司的职级又有很大的区别：职级越高，职责越大，对应的权力却没有很大的增长。因为在开源世界里，民主是更加被推崇的文化，任何抉择只要是被大家所认可的，都可执行下去，同时也不会被某几个人所决定，而是需要大家共同的投票决定才行。</p>\n<h4 id=\"异步工作\">异步工作</h4>\n<p>现如今异步工作方式已经被大多数人所认可，并被证明是一种高效的工作方式，这并不是针对于个人，而是整个团队而言。特别是当团队是来自于全球各地，其中也是存在一定的时差。</p>\n<p>Apache提出72小时工作制度：任何一个需要讨论和确定的事情，至少要存在72小时，其中也考虑到周六周末，这样即使团队的人是来自全球，也能够都看得到某个具体事宜，从而参与到其中。</p>\n<h3 id=\"社区的健康性\">社区的健康性</h3>\n<p>如何评价社区的健康性呢？</p>\n<p>一个健康的社区，通常具备一下特点：</p>\n<ul>\n<li>多样性</li>\n<li>公平</li>\n<li>平等</li>\n</ul>\n<h4 id=\"多样性\">多样性</h4>\n<p>社区的多样性其实来源于多个方面：开发者的多样性以及应用领域的多样性。</p>\n<p>开发者的多样性主要表现在开发者来自于不同国家、不同公司或不同工作领域，不多都有相同的诉求：想用社区的项目解决他们的领域中的问题，所以开发者的多样性也是能够间接说明应用领域的多样性。</p>\n<p>开发者和应用领域的多样性能够给社区带来未知的创新，而这些创新正是社区发展的动力。</p>\n<h4 id=\"平等\">平等</h4>\n<p>有了多样性，如何让各种多样性能够合理平等共存呢？</p>\n<p>无论你是新手开发者还是资深贡献者，在社区都是有权力表达自己的观点，从而保证社区内不断吸纳各种声音，有好的，有坏的，这些都是能够从某些层面改变社区的动力来源。只不过最终如何变化，这是需要获得社区内大部分人的赞同才行。</p>\n<p>所以公平也是民主，能够让社区在更加友好的环境下发展。</p>\n<h4 id=\"公开\">公开</h4>\n<p>社区是支持各种不同的声音和观点，也鼓励大家表达自己的观点，而且这些观点必须让所有人都能够及时且清晰的了解到，只有这样，这些观点才是有价值的。</p>\n<p>如果某个开发者针对于一个项目有自己的见解，想和大家讨论，推荐的方式是：在公开的场合表达自己的观点。而公开的场合可以是邮件列表，也可以是一次分享会的提问，也可以是在github中的一个issue，形式可以是多种多样，只不过必须得保证是所有人都能够通过网络获取到整个观点的全部内容。</p>\n<p>公开的重要性我上面已经介绍过，再次不再赘述了。</p>\n<h3 id=\"两位大佬的观点\">两位大佬的观点</h3>\n<p><img src=\"/images/2022.08/zhuangbiaowei.png\" alt=\"\"></p>\n<p><img src=\"/images/2022.08/wusheng.png\" alt=\"\"></p>\n<h2 id=\"商业开源\">商业开源</h2>\n<p>现如今开源已经和商业产生了紧密的联系，也有很多依托于开源的成功商业案例，在此我将商业开源分为一下两类：</p>\n<ul>\n<li>创业公司做开源</li>\n<li>上市公司做开源</li>\n</ul>\n<h3 id=\"创业公司做开源\">创业公司做开源</h3>\n<p>近些年来，开源的趋势在国内是越来越火，关注到这个领域的人也是越来越多，那些看到开源背后潜力的人大佬们，部分会选择全身心投入到开源项目中去，等成功之后就会将其转化成商业孵化公司，为其提供技术解决方案、技术咨询、云服务等。</p>\n<p>其中不乏做的非常优秀的公司，如TiDB背后的商业公司PingCAP，以及Apache APISIX背后的商业公司APISEVEN等，此公司都是拿到多轮融资，做的非常成功的公司。</p>\n<p>当然也还是有很多正在开源和商业转化中挣扎寻找适合自己出路的创业公司，虽然还在路上，可是他们都坚信开源是他们商业成功的关键。</p>\n<h4 id=\"优势\">优势</h4>\n<p>优势其实很明显：</p>\n<ul>\n<li>能够更具社区的需求快速迭代</li>\n<li>有领域内的顶尖技术专家带领着项目逐步往前走</li>\n<li>可以指定更为灵活的社区管理方式</li>\n<li>创新性比较高</li>\n</ul>\n<p>创业公司往往可以做出小而美的项目，然后经过时间的迭代，不断成长为业界的顶尖项目。</p>\n<h4 id=\"弊端\">弊端</h4>\n<p>不过也有一些弊端：</p>\n<ul>\n<li>资源少</li>\n<li>开源社区运营的重要性非常高</li>\n</ul>\n<p>创业公司没有上市公司的宣传和技术资源，可能前期的蓄力阶段比较长；另外开源项目的成功与否与开源社区运营的状态息息相关，因为这个在蓄力阶段就决定了产品的受众目标和快速迭代的能力。</p>\n<p>总而言之，创业公司做开源基本上是从某一个小方向做起，然后努力做到行业内顶尖水平。</p>\n<h3 id=\"上市公司做开源\">上市公司做开源</h3>\n<p>国家十四五规划中重点提到了开源对于国家未来软件发展的重要性，于是各大公司也在这方向上有很多尝试，比如百度就做了paddle系列的开源项目，华为做了OpenEuler、OpenGauss（Open*）系列的开源项目，阿里也做了自己的AliOS、腾讯也有自己的TecentOS系统。</p>\n<h4 id=\"优势-2\">优势</h4>\n<p>从上面的项目中可以看出，大公司往往更适合做底层基础软件，因为它们具备这样的技术底蕴和技术资源，从各个方面都能够支撑基础软件开发的要求，我想这一点在座的各位都应该很清楚。那咱们重点来说说，大厂做开源的弊端。</p>\n<h4 id=\"弊端-2\">弊端</h4>\n<p>根据本人经历与相关朋友的讨论，总结为以下几点：</p>\n<ul>\n<li>创新性不足</li>\n<li>产品化思维</li>\n<li>核心开发者与开源社区的互动少</li>\n</ul>\n<h5 id=\"创新性不足\">创新性不足</h5>\n<p>为什么说创新性不足呢？</p>\n<p>这一点其实跟不同的组有关，通常情况下一些新功能的开发需要层层审批，只有当大家都同意之后才行，而往往创新性的东西是具备一定风险的，那领导是否愿意去承担这些风险？</p>\n<p>其次企业的tech leader通常是在公司工作多年，熟悉公司技术业务的大佬，可是对于开源是否有一个充分性的认知，这还是有待确定，因为只有深入到开源社区中才能够了解到开源是怎么玩，怎么让它有一个充分性的发展，可是他们往往特别忙，忙着参加公司内部的会议和活动，没有时间去下凡去接触实实在在的开源社区。  所以在一些决策性上面而言，可能与真实情况存在一定的差别。</p>\n<h5 id=\"产品化思维\">产品化思维</h5>\n<p>大公司做项目分工是非常明确的，有产品、运营、管理、技术等不同的人员分配，那每个人是怎么协同工作呢？答案就是产品计划。</p>\n<p>这也是大公司做事的一贯风格和优势，以产品化的思维来完成在绝大情况下都能够保质保量的交付，这也是一种靠谱的方式。这一点也是企业实践出来的经验。可是我个人认为做开源项目并不是在做产品。</p>\n<p>为什么这样说呢？区别主要存在以下几点：</p>\n<ul>\n<li>开源项目的项目计划来自于开源社区，并非产品经理</li>\n<li>开源项目的核心开发者与社区在技术上有深度交互，并非是PM来代替这个角色</li>\n<li>开源项目首先满足的是开发者，<strong>好用</strong>是大前提，其次再是企业。</li>\n</ul>\n<h5 id=\"核心开发者与开源社区的互动少\">核心开发者与开源社区的互动少</h5>\n<p>开源社区最重要的一点在于技术的公开性和交互性。</p>\n<p>公开性表示所有技术细节应该开放出去，无论是技术讨论还是Feature排期讨论，把这些有价值的东西开放出去给其他开发者，这样他们看到这些更细节的东西之后其中不乏一些愿意参与到讨论甚至贡献中来的优秀开发者，开源社区也是更愿意欢迎这些具备一定主动性、有能力解决一些实际问题的开发者，这类的开发者是社区未来潜在的活跃贡献者，甚至会成为PMC Member，所以如何能够吸引这些开发者参与到社区中来，这一点很重要。 可以类比于，开源贡献，愿者上钩，只不过社区一定要把这个钩子给甩出去；其次是一个弯钩，直钩就太难了；最后如果有饵那就更完美了，我相信会有很多开发者愿意因为一些奖金或者title的荣誉来参与到贡献中来。</p>\n<p>互动性表示核心开发者还是需要与社区进行一些互动，并非都是PM来完成这些事情。假象一个场景：如果想要开发者来给项目做贡献，PM就在对应的群或者私聊开发者邀请起参与贡献中来，这个时候开发者内心可能会想：“你一个PM，啥技术都不懂，来叫我做贡献，有奖金吗？”。再来另外一个场景，某开源社区公认的技术大佬在群内或私聊跟某开发者说：“嗯，你的想法很不错，有没有兴趣来提一个PR呢？”，这个时候开发者内心又是如何想呢？大概率会很激动：“卧槽，大佬邀请我来参与贡献，我能完成吗？我该怎么做更好呢？”。</p>\n<p>这两个场景可能有失偏颇，可是也是说明了一些问题：和开发者之间的互动，还是需要技术与技术人员之间来沟通会更好。而且每个行业都存在一定的明星效应，如果开源社区本身就力推一个<strong>明星开发者</strong>，那他就肯定能够代表社区做一些更深入的宣传和运营管理上的工作。</p>\n<h2 id=\"结语\">结语</h2>\n<p>开源是一条必然会成功的道路，无论是对公司还是个人，可是要把这条路给走好，需要做很多事情，也需要用正确的方法来做。以上的所有观点仅代表我个人在此时此刻的认知，如果有不同意见的小伙伴，也欢迎在评论区参与讨论。</p>\n<p>最后祝愿各位开源人在自己的开源项目当中都能够有所获得。</p>\n","categories":["thoughts"],"tags":["opensource","apache-way"]},{"title":"我一直在努力尝试平衡好生活、工作和兴趣","url":"https://wj-mcat.github.io/2022/08/08/thoughts/how-to-balance-work-and-life/","content":"<h2 id=\"背景\">背景</h2>\n<p>生活对于我而言，更重要的是家庭，因为我有了老婆和儿子，每个周末是我们愉快的家庭日，都是需要有足够的时间陪伴他们的，关于这一点是毋庸置疑，也不允许有任何变化。</p>\n<p>工作就是工作日的正常下下班，能容忍的就是偶尔加班，可是不能长期高强度的加班。</p>\n<p>至于兴趣嘛，其实就是持续学习，做自己感兴趣的事情。那我我感兴趣的其实就是写技术博客、开源项目以及学习新技术（主要是看 paper 和大佬的技术博客等），我也会坚持终生学习概念，让自己处于一个不断进步的状态，这样薪资也会水涨船高，也能够缓解自己的部分焦虑感。</p>\n<p>所以，这个 <strong>平衡</strong> 的底层现象就是：我要争取时间来做我感兴趣的事情。</p>\n<h2 id=\"2022-08-08\">2022-08-08</h2>\n<p>得出的结论是没有办法平衡好。</p>\n<p>因为：</p>\n<ul>\n<li>没办法完全舍弃手机上的娱乐</li>\n<li>没办法无时无刻想着自己的学习</li>\n<li>没办法在坐下来后就快速进入到心流状态，进而高效的学习和做事情</li>\n</ul>\n<h2 id=\"2025-03-06\">2025-03-06</h2>\n<p>经过了快三年的修炼，我感觉我好了很多，可以逐渐由自主意识的控制时间，而不是被娱乐所控制。</p>\n<p>当然，我也还没有完全达到最终的绝对自律，只不过我个人这是一个螺旋上升的过程，也是一个痛苦和自我修炼的过程。我相信关于这点会一直持续下去，毕竟人生就是一场自我修行。</p>\n<p>我要继续坚持：</p>\n<ol>\n<li>好好陪伴家人，不要在他们面前抢时间来学习，这样是有损感情的。</li>\n<li>工作的时候，心无旁骛，同时有一套自己的高效工作方法，利用上班的有限时间，做出更多更高质量的事情。</li>\n<li>下班之后和家人规划好时间，哪些是陪伴时间，哪些是学习时间，同时在学习时要尽快进入到心流状态。</li>\n<li>一三五六都要坚持跑步，开心纯跑，快乐到老，希望自己能够坚持下去吧。</li>\n</ol>\n<p>这是我今年对自己的期许，望能如愿坚持。</p>\n","categories":["thoughts"],"tags":["opensource","life","work"]},{"title":"types-paddle: 为Paddle增加Tensor类型注释特性","url":"https://wj-mcat.github.io/2022/08/07/python/types-paddle/","content":"<p>Paddle中没有Tensor类，导致在IDE中写代码时没有办法进行智能提示，我提供了一个解决方案。</p>\n<p><img src=\"/images/2022.07/types-paddle-mini.gif\" alt=\"\"></p>\n<span id=\"more\"></span>\n<h2 id=\"思路\">思路</h2>\n<ul>\n<li>修改已安装Paddle包的<code>paddle/tensor/tensor.py</code>文件，添加未实现的<code>Tensor</code>类。</li>\n<li>添加<code>tensor.pyi</code>文件到paddle包当中，从而实现代码智能提示。</li>\n</ul>\n<h2 id=\"类型注释的三种解决方案\">类型注释的三种解决方案</h2>\n<p>在python当中有三种方式给代码提供类型注释，从而让IDE能够实现智能提示：</p>\n<ol>\n<li>直接在代码中写上类型注释</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>此方法也是在python3.7+中最为推荐的方式。</p>\n<ol start=\"2\">\n<li>原代码中并没有类型注释，便在包中添加<code>pyi</code>文件</li>\n</ol>\n<blockquote>\n<p>什么是<code>pyi</code>文件？可理解为 <code>python interface</code>文件，为某个python module提供接口定义信息。</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># foo.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># foo.pyi</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>此情况下，pyi文件名必须和py文件名一致，这样浏览器在加载原始文件类型信息时，直接从pyi文件中加载。其中<a href=\"https://github.com/PyGithub/PyGithub\">PyGithub</a>就是使用这种方式来提供类型注释。</p>\n<ol start=\"3\">\n<li>作者不想把pyi stub 文件添加到包中</li>\n</ol>\n<p>如果每个文件都要添加一个pyi文件，则代码文件数量直接增加一倍，这将会增加维护的难度，于是可将pyi文件通过第三方包发布。 详细原理可阅读<a href=\"https://peps.python.org/pep-0561/\">PEP 561 – Distributing and Packaging Type Information</a></p>\n<h2 id=\"为什么选择这个解决方案？\">为什么选择这个解决方案？</h2>\n<h3 id=\"面临的问题\">面临的问题</h3>\n<p>我最初的做法也是使用第三种方法，可是发现如果用第三方包发布的话，paddle的所有类型提示将会从我的包走：也就是说我要给paddle所有的module都添加上pyi stub 文件。 这工作量很大，而且很多模块都在发生变动，我没有办法及时获取到最新的变动，很容易导致版本接口不兼容的问题。</p>\n<h3 id=\"解决方案\">解决方案</h3>\n<p>于是，我返回使用第二种方法，只是使用<code>types-paddle</code>来修改paddle包从而支持类型注释。</p>\n<h2 id=\"pyi-是如何生成的？\">pyi 是如何生成的？</h2>\n<p>其中最核心的模块属于pyi文件是如何生成的？毕竟这个代表着<code>Tensor</code>所有类的所有属性：根据<code>runtime Tensor</code>来生成，伪代码如下所示：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> paddle\ntensor <span class=\"token operator\">=</span> paddle<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nmembers <span class=\"token operator\">=</span> get_members<span class=\"token punctuation\">(</span>tensor<span class=\"token punctuation\">)</span>\ngen_stub_file_by_tensor_member<span class=\"token punctuation\">(</span>members<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>详细可见：<a href=\"https://github.com/wj-Mcat/types-paddle/blob/master/scripts/gen_tensor_stub.py\">gen_tensor_stub.py</a></p>\n<h2 id=\"这个包的未来\">这个包的未来</h2>\n<p>我相信，未来paddle肯定是会支持类型注释的，毕竟原始<a href=\"https://github.com/PaddlePaddle/Paddle/blob/develop/python/paddle/tensor/tensor.py\"><code>paddle/tensor/tensor.py</code></a>文件已经写上了<code>TODO</code>。只是该特性还没有完成的时候，这个工具可以提升大家的编码体验。</p>\n<p>希望这个工具能够让大家写paddle越来越爽。</p>\n<h2 id=\"参考资料\">参考资料</h2>\n<ul>\n<li><a href=\"https://mypy.readthedocs.io/en/stable/getting_started.html#stubs-intro\">introduction of stub file</a></li>\n<li><a href=\"https://mypy.readthedocs.io/en/stable/running_mypy.html#fix-missing-imports\">missing imports in python</a></li>\n<li><a href=\"https://mypy.readthedocs.io/en/stable/installed_packages.html#installed-packages\">install type hints package in python</a></li>\n<li><a href=\"https://peps.python.org/pep-0561/\">PEP 561 – Distributing and Packaging Type Information</a></li>\n</ul>\n","categories":["python"],"tags":["python","types"]},{"title":"type hint in python","url":"https://wj-mcat.github.io/2022/08/06/python/type-hint/","content":"<p>类型注释可提升代码的阅读性，配合工具可分析代码中潜藏的Bug，在Python3.7 + 中依然支持变量类型注释，在此我也推荐大家尽量多写一些类型注释，提升代码的可读性和质量。</p>\n<h2 id=\"类型注释\">类型注释</h2>\n<h3 id=\"什么是类型注释？\">什么是类型注释？</h3>\n<h3 id=\"优点\">优点</h3>\n<ul>\n<li>不影响运行性能</li>\n<li>配合类似于pylint、mypy等工具可分析出代码中潜藏的Bug。</li>\n</ul>\n<h2 id=\"py-typed\">py.typed</h2>\n<p>编译器通常不会去做类型推断，特别是安装的第三方库，除非滴</p>\n<h2 id=\"types-distribution\">types-<distribution></h2>\n<h2 id=\"参考资料\">参考资料</h2>\n<ul>\n<li><a href=\"https://mypy.readthedocs.io/en/stable/getting_started.html#stubs-intro\">introduction of stub file</a></li>\n<li><a href=\"https://mypy.readthedocs.io/en/stable/running_mypy.html#fix-missing-imports\">missing imports in python</a></li>\n<li><a href=\"https://mypy.readthedocs.io/en/stable/installed_packages.html#installed-packages\">install type hints package in python</a></li>\n</ul>\n","categories":["python"],"tags":["python","types"]},{"title":"Senmatic  Neural Search","url":"https://wj-mcat.github.io/2022/07/31/nlp/neural-search/","content":"<span id=\"more\"></span>\n<h2 id=\"定义\">定义</h2>\n","categories":["nlp"],"tags":[]},{"title":"Cuda 入门","url":"https://wj-mcat.github.io/2022/07/23/cpp/cuda-0/","content":"<h2 id=\"Introduction\">Introduction</h2>\n<h2 id=\"Grid-Block-Thread\">Grid &amp; Block &amp; Thread</h2>\n<ul>\n<li>Thread: 一个cuda函数会被多个线程执行，故在函数体内需要进行·</li>\n<li>block: 数个thread会被群组成一个block，同一个block中的thread可以同步，也可以通过shared memory进行通信。</li>\n<li>grid: 多个block则会再构成grid。</li>\n</ul>\n<h2 id=\"CUDA-编程模型\">CUDA 编程模型</h2>\n<p>CUDA 程序执行顺序如下所示：</p>\n<ul>\n<li>分配host内存，并进行数据初始化；</li>\n<li>分配device内存，并从host将数据拷贝到device上；</li>\n<li>调用CUDA的核函数在device上完成指定的运算；</li>\n<li>将device上的运算结果拷贝到host上；</li>\n<li>释放device和host上分配的内存。</li>\n</ul>\n<p>kernel: 在CUDA 线程傻姑娘执行的函数，通常代码是需要写在<code>.cu</code>文件中。核函数使用舍<code>__global__</code>符号声明，在调用时需要指定&lt;&lt;&lt;grid, block&gt;&gt;&gt;来指定kernel需要执行的线程数量。</p>\n<p>在cuda中，每一个线程都是需要执行核函数，并会被分配唯一一个threadid，通过核函数的内置变量<code>threadIdx</code>来获取。</p>\n<p>函数类型限定词：</p>\n<ul>\n<li>\n<p><code>__global__</code>: 在device上执行，在host中调用（一些特定的GPU也可以从device中调用），返回数据类型必须void，不支持可变参数，不能成为类函数成员。</p>\n<p>此类函数是异步的，故不会等到kernel执行完再执行下一步。</p>\n</li>\n<li>\n<p><code>__device__</code>: 在device上执行，仅能在device中调用此函数，不可以和<code>__global__</code>同时使用。</p>\n</li>\n<li>\n<p><code>__host__</code>: 仅再host上执行和调用，一般省略不写。</p>\n</li>\n</ul>\n<p>一个kernel启动的所有线程表示为一个Grid, 同一个Grid中的所有线程是共享全局内存空间，其中又包含多个Block（县城块），在调用时可指定grid和block来指定kernel使用的线程数。</p>\n<p>![images/2022.07/cuda-grid.png]</p>\n<p>一个线程块的线程是放在同一个流式多处理器（Stream Multi-Processor），其拥有数百个并发处理的计算的资源，其一定程度上决定GPU的计算能力。Grid只是一个逻辑层，映射线程管理的层面，而SM才是设计到硬件层面的东西。</p>\n<p>SM采用的是SIMT（single-instruction Multi-Thread），单指令多线程的架构，基本的执行单元是线程束（wraps），</p>\n<p>Block中某一个线程的ID可表示为：x + y * D_x。</p>\n<p>在实际项目过程中，host和device的内存分布很容易出现问题，所以cuda6.0提出了统一内存分配：Unified Memory</p>\n<p>问题：<br>\n怎么确定grid和block的维度大小呢？</p>\n","categories":["cpp"],"tags":["cpp","cuda"]},{"title":"Prompt 综述","url":"https://wj-mcat.github.io/2022/06/12/nlp/prompt/survey/","content":"<p>Prompt已然成为新的模型训练方式，方法日新月异，所以全面</p>\n<span id=\"more\"></span>\n<h1>介绍</h1>\n<h2 id=\"三要素\">三要素</h2>\n<ul>\n<li>Prompt Template</li>\n<li>Answer Search</li>\n<li>Answer Mapping</li>\n</ul>\n<h3 id=\"Prompt-Template\">Prompt Template</h3>\n<p>主要负责将input转化成Prompt输入，通常带有[MASK]占位符，这样使用MLM模型即可获取此处的token类别分布。</p>\n<h2 id=\"Prompt-Engineering-vs-Answer-Engineering\">Prompt Engineering vs Answer Engineering</h2>\n<ul>\n<li>Prompt Engineering 主要负责Prompt 函数， 在Paddle-Prompt当中对应Template概念。</li>\n<li>Answer Engineering 主要负责答案搜索和答案映射两个任务，在Paddle-Prompt当中对应Verbalizer概念。</li>\n</ul>\n<h1>Answer Engineering</h1>\n<h2 id=\"非受限空间\">非受限空间</h2>\n<p>非受限空间所得答案即为最终答案，并不存在一个答案空间映射的过程，其中代表工作就是<a href=\"https://github.com/facebookresearch/LAMA\">LAMA</a>。</p>\n<p>LAMA是特地用来测试语言模型所蕴含知识多少的数据集，这个数据集的每个数据，都包含了一个占位符，每个占位符只需要用一个token去填充，填充得到的结果就是最终的答案。例如对于三元组（实体头部，关系，实体尾部）构造得到的完型填空格式只会把实体尾部用占位符替换掉，然后去预测占位符位置的token，如果等于实体尾部，就说明模型具备这条知识，反之就说明模型不具备这个事实。每个占位符只能填充一个token，这里可以填充的token候选等于全词表，填充的答案就是最终的输出。</p>\n<h2 id=\"受限空间\">受限空间</h2>\n<p>此方法需要一个将答案空间映射到目标输出的过程，应用于文本分类、命名实体识别等任务中，</p>\n<h1>训练方法</h1>\n<h2 id=\"参数更新方法\">参数更新方法</h2>\n<p><img src=\"/images/2022.06/prompt-param-update-method.png\" alt=\"cross-attention-bert-decoder\"></p>\n<h3 id=\"Promptless-Fine-Tune\">Promptless Fine-Tune</h3>\n<p>非Prompt训练方法，可认为常规的fine-tuning等训练方法。</p>\n<h3 id=\"Tuning-free-Prompt\">Tuning-free Prompt</h3>\n<p>基于非受限空间构建的模型，能够直接获得最终答案分布，并不需要有一个答案映射的过程。</p>\n<h3 id=\"Fixed-LM-Prompt-Tuning\">Fixed-LM Prompt Tuning</h3>\n<p>此类方法构建的模型当中，包含两类参数：LM和Prompt的参数，前者保持不变，后者可以tuning。经典方法是：Prefix-Tuning和WARP方法。</p>\n<p>优点：</p>\n<ul>\n<li>能够利用LM的先验知识</li>\n<li>能够应用于few-shot的场景</li>\n<li>效果通常要比Tuning-free Prompt方法要好</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>并不适用于zero-shot的场景</li>\n<li>在少样本领域有效，可是数据量太大的情况下，能力也是有限的。</li>\n<li>需要进行seed prompt或者prompt engineering过程</li>\n<li>训练之后的prompt并不具备一定的可解释性</li>\n</ul>\n<h3 id=\"Fixed-Prompt-LM-Tuning\">Fixed-Prompt LM Tuning</h3>\n<p>此方法与Fixed-LM Prompt Tuning相反，Prompt的参数固定，LM的参数可以来训练。经典方法有：PET、LM-BFF等方法。</p>\n<p>此外，也是有将Prompt Engineering取消掉的工作，直接构建：[X] [Z]，中间并没有任何token，然后也是可以去得比较好的效果。</p>\n<p>优点：</p>\n<ul>\n<li>针对于few-shot场景下效果比较好</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>也是需要一定的Prompt Engineering和Answer Engineering。</li>\n<li>LMs 在一个下游任务上的效果比较好，可并在另外一个任务上有可能并不会太好。</li>\n</ul>\n<h3 id=\"Prompt-LM-Tuning\">Prompt+LM Tuning</h3>\n<p>此方法中，LM和Prompt的参数都能够参与训练，此方法与传统的fine-tuning方法有些类似。代表方法有：PADA、P-Tuning等方法。</p>\n<p>优点：</p>\n<ul>\n<li>此方法能够适用于大规模数据。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>在小数据上很容易过拟合。</li>\n</ul>\n<h1>应用任务</h1>\n<p>Prompt可针对不同任务构造不同的prompt从而，</p>\n<h2 id=\"\"></h2>\n<h1>参考链接</h1>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/495623835\">Prompt learning系列之answer engineering(一) 人工设计篇</a></li>\n</ul>\n","categories":["nlp","prompt"],"tags":["nlp","prompt learning"]},{"title":"Cross Attention","url":"https://wj-mcat.github.io/2022/06/11/nlp/pretrained-language-model/cross-attention/","content":"<p>Cross Attention是用来处理两个不同Sequence时的SelfAttention变体。</p>\n<span id=\"more\"></span>\n<h1>介绍</h1>\n<p>属于Transformer常见Attention机制，用于合并两个不同的sequence embedding。而这两个sequence便是：Query、Key/Value。</p>\n<p><img src=\"/images/2022.06/cross-attention-detail-perceiver-io.png\" alt=\"cross-attention\"></p>\n<p>CrossAttention和SelfAttention的计算过程一致，区别在于输入的差别，通过上图可以看出，两个embedding的sequence length 和embedding_dim都不一样，故具备更好的扩展性，能够融合两个不同的维度向量，进行信息的计算交互。</p>\n<p>而SelfAttention的输入仅为一个。</p>\n<h2 id=\"应用\">应用</h2>\n<p>其实基于CrossAttention的相关应用研究非常多，特别是处理不同数据来源的时候会有很好的效果。</p>\n<p>比如：</p>\n<ul>\n<li>Bert Decoder中有采用Cross Attention的机制。</li>\n</ul>\n<p><img src=\"/images/2022.06/cross-attention-in-bert-decoder.png\" alt=\"cross-attention-bert-decoder\"></p>\n<ul>\n<li>在三种不同Embedding中的信息交互过程</li>\n</ul>\n<p><img src=\"/images/2022.06/cross-attention-perceiver-io.png\" alt=\"cross-attention-bert-decoder\"></p>\n<p>从上图可以看出，总共有三种数据来源，采用了Cross Attention和Self Attention的结合来建模。</p>\n<blockquote>\n<p><a href=\"https://arxiv.org/pdf/2107.14795.pdf\">Perceiver IO</a></p>\n</blockquote>\n<h2 id=\"代码\">代码</h2>\n<h1>参考链接</h1>\n<ul>\n<li><a href=\"https://vaclavkosar.com/ml/cross-attention-in-transformer-architecture\">cross-attention-in-transformer-architecture</a></li>\n</ul>\n","categories":["nlp","pretrained-language-model"],"tags":["nlp","transformer"]},{"title":"type hinting in python","url":"https://wj-mcat.github.io/2022/06/03/python/type-hinting/","content":"<span id=\"more\"></span>\n<h2 id=\"场景\">场景</h2>\n<ul>\n<li>开发者直接在源代码中添加type hinting</li>\n<li>开发者通过stub file来添加type hinting</li>\n<li>开发者不想在原始代码中添加，而是想通过第三方package来解决type hinting的问题，从而实现最低无侵入性的实现。</li>\n</ul>\n<p><a href=\"https://peps.python.org/pep-0561/\">561 PEP</a> 旨在解决实现以上三种场景。</p>\n<p>如果开发者希望代码能够支持 type checking，此时就必须要添加一个<code>py.typed</code>文件在项目当中，这样当前当所在目录以及所有子文件夹都将会自动开启类型检查功能。</p>\n<h2 id=\"基本原理\">基本原理</h2>\n<h2 id=\"打包类型信息\">打包类型信息</h2>\n<p>如果要强制添加</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">setup<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>\n    package_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">'foopkg'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'py.typed'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Stub-Only-Packages\">Stub Only Packages</h3>\n<p>此时就需要单独发布一个包，并且里面只包含stubfiles，并且格式为：<code>&lt;package-name&gt;-stubs</code>，比如<code>paddlenlp-stubs</code>，此外paddlenlp就不需要是添加<code>py.typed</code>文件了，因为<code>**-stubs</code>就已经表示此包使用了类型检查的功能。</p>\n<h3 id=\"Partial-Stub-Files\">Partial Stub Files</h3>\n<p>需要在包中添加<code>partial\\n</code>来说明包被分成了<code>n</code>个组成部分。</p>\n<p>如果只想针对于项目中的部分模块做对应的类型注释，此时就需要使用<code>py.typed</code>来设置，详细可见<a href=\"https://peps.python.org/pep-0420\">PEP 420</a>.</p>\n<p><code>namespace packages</code>是一种不完整的包，可使包变得更加完整。</p>\n","categories":["python"],"tags":["python"]},{"title":"http-server review","url":"https://wj-mcat.github.io/2022/04/03/python/http-server/","content":"<p>Http Server旨在处理HttpRequest并返回HttpResponse，不同WebFramework具备不同的Routing、View等机制，可都遵循WSGI接口处理Http请求，这样所有的请求就都可以运行在基于WSGI的服务器上，从而实现接口。</p>\n<p>在Python中写一个WebFramework是一个很简单的事情，当然入口方法最核心的在于以下此函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> werkzeug<span class=\"token punctuation\">.</span>serving <span class=\"token keyword\">import</span> run_simple\nrun_simple<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>options<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>此代码仅仅是给大家一个直观的感受，后续我将逐渐剖析几个主流WebFramework中的核心技巧和源码实现。</p>\n<span id=\"more\"></span>\n<h2 id=\"Flask-源码\">Flask 源码</h2>\n<h3 id=\"app-py\"><a href=\"http://app.py\">app.py</a></h3>\n<ul>\n<li>http handler entry point</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> environ<span class=\"token punctuation\">:</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">,</span> start_response<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">.</span>Callable<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">.</span>Any<span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"The WSGI server calls the Flask application object as the\n    WSGI application. This calls :meth:`wsgi_app`, which can be\n    wrapped to apply middleware.\n    \"\"\"</span>\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>wsgi_app<span class=\"token punctuation\">(</span>environ<span class=\"token punctuation\">,</span> start_response<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>第一个参数就是http request header的字典类型，此时如何处理header在不同请求头里面的。<br>\nstart_response 负责status code 和 exception等情况的处理。</p>\n<ul>\n<li>dispatch request</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">dispatch_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ResponseReturnValue<span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Does the request dispatching.  Matches the URL and returns the\n    return value of the view or error handler.  This does not have to\n    be a response object.  In order to convert the return value to a\n    proper response object, call :func:`make_response`.\n\n    .. versionchanged:: 0.7\n        This no longer does the exception handling, this code was\n        moved to the new :meth:`full_dispatch_request`.\n    \"\"\"</span>\n    req <span class=\"token operator\">=</span> _request_ctx_stack<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">.</span>request\n    <span class=\"token keyword\">if</span> req<span class=\"token punctuation\">.</span>routing_exception <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>raise_routing_exception<span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\n    rule <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>url_rule\n    <span class=\"token comment\"># if we provide automatic options for this URL and the</span>\n    <span class=\"token comment\"># request came with the OPTIONS method, reply automatically</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">,</span> <span class=\"token string\">\"provide_automatic_options\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">and</span> req<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"OPTIONS\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>make_default_options_response<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># otherwise dispatch to the handler for that endpoint</span>\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>ensure_sync<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>view_functions<span class=\"token punctuation\">[</span>rule<span class=\"token punctuation\">.</span>endpoint<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>req<span class=\"token punctuation\">.</span>view_args<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中<code>view_functions</code>为字典类型，key是module-method identifier，value 是view function。</p>\n<blockquote>\n<p>此类方法看似很简单，其实就这样设计即可实现功能</p>\n</blockquote>\n<h3 id=\"view-py\"><a href=\"http://view.py\">view.py</a></h3>\n<p>这个模块整体比较简单，</p>\n<h3 id=\"Route\">Route</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> rule<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>options<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">.</span>Any<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">.</span>Callable<span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Decorate a view function to register it with the given URL\n    rule and options. Calls :meth:`add_url_rule`, which has more\n    details about the implementation.\n\n    .. code-block:: python\n\n        @app.route(\"/\")\n        def index():\n            return \"Hello, World!\"\n\n    See :ref:`url-route-registrations`.\n\n    The endpoint name for the route defaults to the name of the view\n    function if the ``endpoint`` parameter isn't passed.\n\n    The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` and\n    ``OPTIONS`` are added automatically.\n\n    :param rule: The URL rule string.\n    :param options: Extra options passed to the\n        :class:`~werkzeug.routing.Rule` object.\n    \"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">.</span>Callable<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">.</span>Callable<span class=\"token punctuation\">:</span>\n        endpoint <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">\"endpoint\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>add_url_rule<span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">,</span> endpoint<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>options<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> f\n\n    <span class=\"token keyword\">return</span> decorator<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此函数就负责最常使用的route函数，是不是很简单，并不需要很复杂的设计，只需要完成功能即可。</p>\n","categories":["python"],"tags":["python"]},{"title":"一些深有体会的句子","url":"https://wj-mcat.github.io/2022/03/25/thoughts/some-good-words/","content":"<center>一些可能会颠覆认知的句子。</center>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"情绪\">情绪</h2>\n<ul>\n<li>\n<p><em><strong>重大的情绪变化可能会改变人生观</strong></em></p>\n<p>当设变发生了某些对情绪影响很大的事情时，可能会对人生观产生影响。</p>\n</li>\n</ul>\n<h2 id=\"毅力\">毅力</h2>\n<ul>\n<li>\n<p><em><strong>毅力是一件靠不住的东西</strong></em></p>\n<p>如果真的要完成一件事情，必须要依赖于毅力，显然内心肯定是在挣扎，在消耗能量的。</p>\n<p>我们要的不是自律，而是要不断追求自己人生目标，如果为了完成人生目标需要使用到自律，那自律很容易实现。</p>\n<p>一个为了自律而自律的人其实是很可悲的，自律不是目的，而是实现人生目标的手段。不要让自律控制了自我，要将自律变成追求梦想的工具。</p>\n</li>\n</ul>\n","categories":["thoughts"],"tags":["life"]},{"title":"这些有趣的电影","url":"https://wj-mcat.github.io/2022/03/23/thoughts/movies/","content":"<center>每部电影都有感人之处，我从自己的角度来挖掘内心的触感。</center>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"《金福南杀人事件》\">《金福南杀人事件》</h2>\n<p><em><strong>无岛</strong></em>上的人与世隔绝，忍受着扭曲的生活，即时被乱伦也要强仍泪水接受。</p>\n<ul>\n<li>\n<p>第一次观看</p>\n<p>第一次是和芳芳一起看的，感觉很压抑，感受到贫穷往往伴随着罪恶，或者说罪恶被贫穷给掩盖住了，而我也是因为罪恶而讨厌贫穷，因为我从小就经历了这些。</p>\n<p>以前贫穷不是一种罪过，因为有时候即时努力了也没用；现在如果处在这个美好时代的你还是贫穷，那是一种自作自受。</p>\n</li>\n<li>\n<p>第二次观看：2022-03-23</p>\n<p>这次观看带个我的冲击比较大，相比第一次的贫穷，这次带给我的是：<strong>信息</strong>。</p>\n<p>岛上的人可能一辈子没看到过外面精彩的世界，也不知道什么是法律，不知道如何改进现有的生活，或许这就是为什么十年如一日。</p>\n<p>经过在北邮的这几年，信息的重要性已经深深烙印在我的心中，比如原来申请国外研究生或博士比考研简单多了；读北大的研究生其实并没那么难，只要在官网上申请就行了；如果想要去微软MSRA实习，其实并没有那么难，只需要到北大论坛上找对应的帖子投递简历就行了； 这些看起来不可能的事情，中间就隔着信息屏障。</p>\n<p>那如何打破这个信息屏障呢？让自己变得优秀，这是前提；多跟新朋友吃饭、聊聊天；没事多看一些官方的信息，少看一些无用咨询，浪费生命；</p>\n</li>\n</ul>\n","categories":["thoughts"],"tags":["movies"]},{"title":"数据结构在机器学习中的思考","url":"https://wj-mcat.github.io/2022/03/23/nlp/ml-data-structure/","content":"<p>当不同任务下的数据结构统一后，如训练数据、验证数据以及测试数据，模型的训练、切换、验证、测试等不同阶段都可以实现高效自动化。</p>\n<span id=\"more\"></span>\n<h2 id=\"介绍\">介绍</h2>\n<p>做过模型训练平台的小伙伴对此不会陌生，因为这也是他们日常工作中的一部分，也算是基础设计了。先介绍一下一些MLOps平台的一个基础需求吧：</p>\n<ul>\n<li>支持上传多种不同类型的任务数据集</li>\n<li></li>\n</ul>\n<h2 id=\"快速实验\">快速实验</h2>\n<p>如果想要将数据集应用在这些数据集上，</p>\n<p><img src=\"/images/2022.07/data-structure-of-nlp-corpus.png\" alt=\"\"></p>\n<h2 id=\"数据结构化\">数据结构化</h2>\n<p>模型可能需要在多个数据集上训练、验证以及预测，故数据集结构的统一对于流程化管理至关重要。</p>\n<p>针对于不同任务可制定不同的数据集数据结构，如下所示：</p>\n<ul>\n<li>\n<p>单标签分类</p>\n<ul>\n<li>训练输入</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"标签\"</span><span class=\"token punctuation\">,</span> \n  <span class=\"token property\">\"raw_text\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"metadata\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>测试输入</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"raw_text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"metadata\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>多标签分类</p>\n<ul>\n<li>训练输入</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"标签1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"标签2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"标签3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"request_label\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"标签1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"标签2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"标签3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"raw_text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"metadata\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>测试输入</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"request_label\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"标签1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"标签2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"标签3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"raw_text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"metadata\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>序列标注</p>\n<ul>\n<li>训练输入</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"raw_text\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"XXX\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"metadata\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"class_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"XX\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"start_offset\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"end_offset\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"span\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"XXX\"</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ...<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>测试输入</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"raw_text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"XXX\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"metadata\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>文本相似度匹配</p>\n<ul>\n<li>训练输入</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"标签\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"text_a\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"sentence1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"text_b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sentence2\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"metadata\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>测试输入</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"text_a\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"sentence1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"text_b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sentence2\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"metadata\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>问答</p>\n</li>\n</ul>\n<h2 id=\"总结\">总结</h2>\n","categories":["nlp"],"tags":["nlp","data"]},{"title":"人生中的梯度优化","url":"https://wj-mcat.github.io/2021/09/27/thoughts/gradient-in-life/","content":"<p>每天进步<code>1%</code>，一年后就是<code>37</code>倍。</p>\n<span id=\"more\"></span>\n<p>推荐阅读李沐老师<a href=\"https://zhuanlan.zhihu.com/p/414009313\">《用随机梯度下降来优化人生》</a>，站在技术的角度来阐述了他对技术人一生的几个建议，非常值得深度思考。其实就单纯的对于梯度下降一词，就可以聊很多，这篇文章我就围绕梯度下降来展开讨论。</p>\n<blockquote>\n<p>每天提升一点点，时间长了这就是一个可怕的质变。</p>\n</blockquote>\n<hr>\n<h2 id=\"应该做梯度下降吗？\">应该做梯度下降吗？</h2>\n<p>人生轨迹靠自己决定，有的人在大学里面完成了华丽的逆转；有的人出了学校才找到自己的人生方向，于是开始寻找合适自己的人生方向；有的人选择躺平，过上自己觉得舒服的日子。</p>\n<p>我本身是一个非常想躺平的人，每天做点自己喜欢的事情（理想事情是：Coding, Writing and Sporting），就已经是一种快乐了，可是后来我偶发现其实我并不是很喜欢我认为我所喜欢，至少还没有达到疯狂的状态，我想如果我真的能够达到那种状态，我想那个时候我肯定已经是TOP 1%的人了。</p>\n<p>可回头想想，如果真的能够达到那种状态，难道还要等到现在吗？所以我在心里认为我可能一辈子都不会达到对某种事情几近疯狂的状态，那难道我就要放弃吗？</p>\n<p>我的答案是：不要放弃，即时是没有达到那种状态，非常正常。</p>\n<p>为了不让生活变得不那么无聊，为了过上平常人的生活，我们必须要每天进步一点点，即时是学习率比较低也没关系，即使是达到局部最优也没关系，至少代表在不断的变好。</p>\n<hr>\n<h2 id=\"何时做梯度下降？\">何时做梯度下降？</h2>\n<p>面对这个问题，直观的感受就是：现在。</p>\n<p>可是，这个问题可以转化为<strong>如何有效利用时间学习？</strong></p>\n<p>网上有很多相关博文，那我的建议是远离手机，提高对事情的专注力。</p>\n<p>手机里除了有日常生活，还有信息诱惑。以前的时代很容易出匠人，反观现在的人有多少人能够专注两个做一件事情而不看一眼手机的，少。我周围有很多人拿起手机刷视频至少是30+min，然后把时间都”浪费“在刺激分泌多巴胺的无用视频中，从长远来看，这些视频只是在娱乐我们，或者说被大厂给娱乐了，被这个时代给娱乐了。如果我们的时间被他们偷走了，自我也会逐渐迷路。</p>\n<p>专注力这个东西非常稀缺，大家可以去图书馆看看，即时是坚持来图书馆学习，又有多少人是在低头玩手机呢？无论是在学校图书馆还是市立图书馆，此类现象屡见不鲜。这种现象的背后其实是手机的诱惑导致大家专注力不足，从而需要在手机里继续刺激自我，分泌诱人的多巴胺。</p>\n<p>我有一个朋友，他跟我说：他现在无法持续十分钟专注做一件事情，这件事情让他感觉到很可怕。</p>\n<p>其实我们大多数都是这个样子，无法长时间专注在一件事情上，即使有时候看电影也时不时拿起手机看看朋友圈，看似事小，其实它很影响我们对于某件事情的专注程度，从而降低深度思考，无法有自己的独特见解。甚至只是简单的记得内容罢了。说实话，这件事情很可怕。</p>\n<p>远离手机，开始专注在某件事情上，无论是大事还是小事，全身心投入其中即可，感受心流的状态，逐渐你也会感觉到幸福。</p>\n<p>什么时候做梯度下降，我觉得应该是贯穿在我们生活中每个时刻把。</p>\n<hr>\n<h2 id=\"该如何做梯度下降\">该如何做梯度下降</h2>\n<p><strong>再小的步伐也没关系</strong>，无论目标多大，无论步伐多大，坚持走下去，至少能够比当下更优。时间长了这将会是一个很客观的优化进度。每个人腿长不一样，步伐可能有点差别，可谁最终能达到终点，跟腿长并没有太大的关系，因为人生是一个长跑，并不是短跑。</p>\n<p><strong>走自己的路</strong>，有的人走柏油路，有的人走山路，有的人走泥沼路，有的人却在攀岩。不同的路不一样，我们也没办法选择其它的道路，走下去，走出自己的风格，走出自己的观众。</p>\n<hr>\n<h2 id=\"总结\">总结</h2>\n<p>即时是再慢，人生总是在慢慢往前走，再慢也关系，坐下来休息下也没关系，主要整体上在继续往前走就行了。</p>\n","categories":["thoughts"],"tags":["life"]},{"title":"NLP 高频面试题目","url":"https://wj-mcat.github.io/2021/09/21/nlp/frequency-interview-questions copy/","content":"<h2 id=\"NLP-大专题\">NLP 大专题</h2>\n<ul>\n<li>统计及其学习\n<ul>\n<li>AUC、ROC</li>\n<li>Precision、Recall</li>\n<li>L1、L2正则化规律</li>\n<li>NCE Loss</li>\n<li>Word2Vec 的详细知识点\n<ul>\n<li>负采样、哈夫曼树</li>\n</ul>\n</li>\n<li></li>\n</ul>\n</li>\n</ul>\n","categories":["nlp"],"tags":["nlp","interview"]},{"title":"Few-shot Intent Classification and Slot Filling with Retrieved Examples","url":"https://wj-mcat.github.io/2021/09/17/nlp/papers/2021/few-shot-intent-classification-and-slot-filling-with-retrieved-examples/","content":"<p>使用基于检索式的方法建模意图识别和槽填充。个人认为这种方法比较符合人类的思维方式，通过拿SupportSet召回最相思的Span，从而根据这个来意图识别和槽填充。</p>\n<p>创新点：</p>\n<ul>\n<li>training：batch softmax objective function</li>\n<li>span retriver：使用support set 中的数据来做对应的召回</li>\n</ul>\n<p>这种方式相对于其他方法的区别在于：</p>\n<span id=\"more\"></span>\n<h2 id=\"模型介绍\">模型介绍</h2>\n<p>模型结构相对简单，作者在论文中也仅仅给出<code>query</code>和<code>support set</code>的样例数据。</p>\n<h2 id=\"优点\">优点</h2>\n<ul>\n<li>模型训练速度非常快</li>\n<li>针对于相似文本的span召回效果非常好</li>\n<li>可解释性好</li>\n<li>能够实现多意图识别</li>\n<li>不需要对标签之间的转移矩阵进行建模，加大学习的难度</li>\n<li>预测的过程可以并行，执行效果非常好</li>\n<li>可以通过阈值来调整precision和recall的性能表现能力</li>\n</ul>\n<h2 id=\"模型\">模型</h2>\n<h3 id=\"数据构造\">数据构造</h3>\n<p>其实就是根据数据的检索建模来完成。</p>\n<h3 id=\"Retriver\">Retriver</h3>\n<p>模型其实就是一个Encoder，对文本进行编码建模，然后在其中找到对应最相思的span作为其标签。</p>\n<ul>\n<li>Encoder</li>\n</ul>\n<p>一般都使用Bert</p>\n<ul>\n<li>Span Embedding</li>\n</ul>\n<p>如果是槽填充，便使用第一个单词和最后一个单词的embedding拼接来完成。如果是意图识别就使用[cls]位置的embedding向量表示。</p>\n<ul>\n<li>similarity score</li>\n</ul>\n<p>内积大小</p>\n<p>TODO：我觉得可以尝试使用其他几种不同的模型来处理</p>\n<ul>\n<li>batch softmaxs</li>\n</ul>\n<p>每一个support set 都和batch中的所有span计算相似度，得出最终的结果。</p>\n<h2 id=\"数据集\">数据集</h2>\n<ul>\n<li>SNIPS、CLINC</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数据集</th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sdf</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n","categories":["nlp","papers","2021"],"tags":["nlp","few-shot"]},{"title":"Become a Sharer","url":"https://wj-mcat.github.io/2021/08/20/thoughts/become-a-sharer/","content":"<center>与这个世界的沟通，</center>\n<center>是一个充满质疑和自我怀疑的过程，</center>\n<center>能做的只有相信自己，</center>\n<center>砥砺前行，</center>\n<center>追求内心最真实的自我，</center>\n<center>而分享者，</center>\n<center>是最好的载体，</center>\n<center>至少在当下是这样。</center>\n<span id=\"more\"></span>\n<hr>\n<p>《<a href=\"https://book.douban.com/subject/6021440/\"><strong>黑客与画家</strong></a>》曾指出，程序员其实和画家本质上无异，都是艺术创作者，只是表现形式和价值体现不同而已。</p>\n<p>画作传递的是一种精神力量，源远流长；代码是能够让整个社会高速运转的小齿轮，时效性很大，不过更新迭代非常快。</p>\n<blockquote>\n<p>此篇文章针对于热爱写代码，并在感觉写代码是一件非常快乐的事情的人。</p>\n</blockquote>\n<h2 id=\"一定要成为一个Sharer\">一定要成为一个Sharer</h2>\n<p>面对新时代的发展，程序员的创作如何发挥最大价值，非分享莫属。Github的成功也证明了分享（开源）在程序员这个领域中的重要性，贡献自己的微弱力量，众人拾柴火焰高，有来自全世界各地的优秀开发者贡献自己的issue和pr，这对于一个开源项目来说是极大的动力和发展，从而推动软件行业和社会的发展，无论是对于个人还是社会，意义非凡。</p>\n<p>可是，从我的经历看来，国内大部分程序员的表达欲望是非常低迷的，鲜有活跃于开源社区，持续不断的做贡献的人。反观国外，分享已经成为流行趋势，思想之间的碰撞更能够促进个人以及社区的发展。</p>\n<p>开放原子开源基金会主席堵俊平在访谈中也谈及到这个观点，介绍图片链接在最底部，感兴趣的人可以扫码听。</p>\n<p><img src=\"/images/2021.08/become-a-sharer.jpg\" alt=\"\"></p>\n<p>所以我觉得，分享必将成为个人职业规划中的一个非常重要的环节。</p>\n<p>这一点Coder很重要，为什么程序员一定要分享？我想大家都有所涉猎，我就不再详述，简单的罗列一下：</p>\n<ul>\n<li>建立知识体系</li>\n<li>提升社区影响力</li>\n<li>提升发展可能性</li>\n<li>提升发展上限</li>\n<li>为心中曾经的那一个梦</li>\n</ul>\n<p>分享能够通过他人来验证自己的理解，无论正确与否，这都是自己的见解，从不同角度出发给出的属于自己对于整个世界的认知。不要担心是否会被diss，因为之后这样你才能够认识到自己还是有提升的方面。</p>\n<p>分享能够给整个社会贡献自己的一份力量，只要有人从你的工作当中得到启发，提升工作效率，这就是有价值的。</p>\n<p>作为一个技术人员，需要将自己的技术观点和积累分享出去，共建知识社区，从长远来看，这是一条可持续发展的道路。</p>\n<hr>\n<h2 id=\"分享到底是什么\">分享到底是什么</h2>\n<p>作为一个程序员，分享就是针对于一个知识点、问题、一个新技术来表达你对其的理解，然后通过一些媒体渠道散播出去，与大家一起讨论相关内容。</p>\n<ul>\n<li>\n<p>你可以分享属于自己知识领域的东西，比如<a href=\"http://www.ruanyifeng.com/home.html\">阮一峰</a>就经常在自己的博客上面分享工作和学习过程中的所见所闻，起初是一直在分享领域内的知识点，最近（截止2021.08.20）一直在组织科技爱好者周刊，推广并介绍科技领域内的高质量新闻。</p>\n</li>\n<li>\n<p>你可以分享新技术，新框架。比如说你可以写一篇关于聊天机器人框架的博文，然后分享在知乎、掘金等技术社交媒体上，与大家共同讨论相关的不同层面的内容。</p>\n</li>\n<li>\n<p>你可以分享你对某个知识的感悟，此时并不是站在技术的角度，而是自己长期以来的经历后的理解。这些也是非常有价值的分享，可以与他人进行更深入的讨论上层建筑，这是一件非常有挑战性的事情，可以锻炼整体观的归纳能力，也可以结交更过志同道合的朋友，何乐而不为呢？</p>\n</li>\n<li>\n<p>你也可以将自己工作和学习过程中的代码解决方案整理成一个开源项目分享出来，让全世界的人帮助你一起维护该项目，这是一件非常酷的事情。</p>\n</li>\n</ul>\n<p>可以说，阮一峰是很多程序员所向往的那种状态，工作之余写一些优秀的博文，和大家一起讨论技术和热点技术新闻，顺带给自己增加一些额外收入（大部分都是广告），即做了自己喜欢的事情，也有了一定的收入，反向激励着自己继续坚持爱好，我想这就是最理想中的分享的样子吧。</p>\n<p>而这一切都是最初对于<strong>分享这件事情的坚持</strong>。逐渐积攒了领域内的技术，有利于面试和工作当中的硬实力；此外也会慢慢积攒社区影响力，然后额外收入就自然而然找上门，未来可选择的机会就多了；我相信，在坚持分享的这条路上人，会逐渐清晰自己未来想要什么，而坚持所带来的反馈也让他越来越相信坚持的重要性和必要性。</p>\n<hr>\n<h2 id=\"如何开始分享\">如何开始分享</h2>\n<p>前几个月我的一个朋友曾告诉我，对于一个初学者而言，如何开始写作？那就是<strong>无论质量如何</strong>，先以你当下最好的水平开始写，<strong>写多了，你就会开始总结，寻找方法，如何针对于当先作最切实际的改进</strong>。</p>\n<p>所以，从现实反推理论，我很认同我朋友给我的建议，先了解写作的常规Best Practice，此时并不是要你完全照搬，而是选择适合自己的整体方向开始上手，时间一长，基本上就轻车熟路，然后再对照着Best Practice来看看是否需要做出一定的调整，多次迭代调整之后，我相信会形成属于自己的风格与写作框架。</p>\n<blockquote>\n<p>任何能力的提升，都是一种螺旋式上升的过程。</p>\n</blockquote>\n<p>我在这里推荐两篇比较优秀的文章，有干货有见解，希望对大家有所帮助：</p>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/40716838/answer/88522718\">程序员怎样才能写出一篇好的博客或者技术文章？</a></li>\n<li><a href=\"https://www.zhihu.com/question/273631529/answer/1330177772\">写博客对程序员很重要吗？</a></li>\n</ul>\n<h2 id=\"写博客可遵循的步骤\">写博客可遵循的步骤</h2>\n<h3 id=\"找一个感兴趣的主题\">找一个感兴趣的主题</h3>\n<p>如果你想开始写博客，需要找一个自己感兴趣的方向，无论这个方向是不是当下最热都无所谓。</p>\n<p>如果是当下最新技术发布或研究进展，我想此时你的一篇介绍文章会给你快速带来阅读量和讨论数量；如果是已经出现过一段时间，或者针对于经典问题你也可以发表自己的观点，结合其他人的看法最终给出自己的观点，博客一经发布，我相信在相当长一段时间内会不断有人来讨论相关内容，其中不乏一些具备创新性的观点，而这些观点也是自我成长和推进技术进步的关键因素。</p>\n<p>其实，写博客是一种轻量版的论文编写，对于个人和他人其实都是有益处的。</p>\n<p>可是，如果没有一个感兴趣的话题该怎么办？甚至你觉得这东西没有什么写的价值。</p>\n<p>感不感兴趣是很主观的，你不感兴趣不代表别人不感兴趣，比如大学教授十年如一只讲一门课程，其实对于绝大多数的教授而言是很无聊的，可是下面的学生有很多就会听得津津有味，因为这对于他们而言是新鲜的，是可以从中学到知识的；如果你觉得没有写的价值，或许是因为你已经对此烂熟于心，对此已经习以为常，觉得其他人应该了解这个知识点，或者懂得如何运用。<br>\n不要你觉得，只要大家觉得。而这个途径就只能是通过博客的形式来和其他开发者建立一个良好沟通的桥梁。</p>\n<h3 id=\"定位好目标读者和博客类型\">定位好目标读者和博客类型</h3>\n<p>其实这个也是做好博客内容的定位：初级开发者、高级开发者。此类博客可随着自己在学习某种技术的变化而变化：前期博客、后期博客。这样博客也是随着自身在成长和发展，这是一件很有意思的事情。</p>\n<p>另外技术博客也是分为好几种类型：</p>\n<ul>\n<li>干货型：扔一堆资料并稍作总结，你自己去看吧</li>\n<li>技术细节型：针对于某一个技术点做深入讲解</li>\n<li>思考型：针对于一个问题表达自己的观点</li>\n</ul>\n<p>以上不同类型博客的撰写也是随着自己的学习、心情和掌握程度而发生变化。</p>\n<h3 id=\"\"></h3>\n<hr>\n<h2 id=\"总结\">总结</h2>\n<blockquote>\n<p><em><strong>如果没有兴趣爱好，分享这件事情是坚持不下来的</strong></em></p>\n</blockquote>\n<p>我想有很多人都尝试过分享，有自己的博客，只不过上面的文章寥寥无几，是因为三分钟热度之后就没有后续。</p>\n<p>有的人是因为最开始就没有给自己正向反馈，于是就慢慢放弃了，我想这还是因为没有兴趣，如果有，每一次的post都将会是一个激励。网上有很多<strong>干货</strong>，可是这些干货归根结底还是需要自己用某种方式坚持，所以说坚持才是这件事情的核心。既然事情的输出都是一样的，选择好属于自己的方式，规划好时间，努力坚持就行了，从现在开始。如果没坚持下去也没关系，因为毕竟你已经失败过很多次了，多一次也没关系，你也还在这个死循环里面，什么时候打破这个死循环，就看你什么时候能够把坚持这件事情贯彻到底。</p>\n","categories":["thoughts"],"tags":[]},{"title":"如何快速做算法实验","url":"https://wj-mcat.github.io/2021/05/11/nlp/ml-ops/","content":"<p>每个算法工程师都必须要有自己熟悉的一套code toolkit，包含各种不同的任务，开放不同模块的接口，能够快速复现出sota方法，同时最重要的是有一套完整的分析步骤流程，帮助解决类似于无法收敛、梯度消失爆炸等问题、模型输入输出等相关问题。</p>\n<p>MLOps（Machine Learning Operations）旨在提供模型开发、构建以及部署等多方面的流程化管理，类似于DevOps，只需要按照某种约定和配置，即可实现整体性的测试发布流程。</p>\n<p>在模型层面，模型的正确性测试、模型指标验证、模型的发布以及模型的可视化测试等多个层面都可进行流程化控制，从而减少算法工程师的工作量；从技术的历史发展进程上来看，<strong>ML Ops是每一个算法工程师在未来都将具备的基本技能</strong>。</p>\n<p><img src=\"/images/2022.03/mlops_visual.svg\" alt=\"\"></p>\n<span id=\"more\"></span>\n<h2 id=\"定义\">定义</h2>\n<p>做任何事情，提升效率是提升能力的关键，那对于算法工程师而言，快速实验一方面是工作和学习中的高效竞争力，另一方面能够帮助自己预留更多的时间来处理其他事情，比如分析数据、分析模型、从而做相关的模型消融实验等等，所以快速实验是一个非常必要的技能，也是长期工作和学习过程中必定要具备的一项技能。</p>\n<p>那怎么才算是快速实验呢？如果要在目前已有的任务上面跑，只需要<strong>简单改吧改吧</strong>就能够得出所有的实验结果。</p>\n<h2 id=\"要求\">要求</h2>\n<p><strong>简单改吧改吧</strong>听起来非常简单，里面有很多工作需要完成，比如说：</p>\n<ul>\n<li>针对于某一个任务的输入输出、数据处理、模型结构、训练、评估等模块都要非常熟悉。</li>\n<li>熟练使用某一个代码框架，如pytorch、paddle等，并整理一套属于自己的实验toolkit。</li>\n<li>将自己的代码框架open出去，和其他开发者共同维护工具库</li>\n<li>需要更多的时间和兴趣来维护，而且还特被重要</li>\n</ul>\n<p>这些要求简单也不简单：内容简单，可坚持不简单，同时用对的方法完成更加是难上加难。</p>\n<h2 id=\"总结\">总结</h2>\n<p>如果这个工作做好了，对自身和开源社区都是非常有价值的事情，可是这件事情很难。</p>\n<p>那为什么这么难呢？明明是一件很简单的事情，如果给一个没有感性的模拟机器人来完成，这就是一个easy case job：每天定点定时完成某些任务，按时保质的坚持，这对于个人而言极其重要。</p>\n<blockquote>\n<p>让我想起了电竞行业里面，每位选手都需要知道什么时候该做什么事情，什么时候不该做什么事情，思路非常清晰，一定要客观，尽量避免主观。可是很难，因为他们不是机器人，而是具有感情的人。</p>\n</blockquote>\n<p>我有时候在想，自己是否要来一点人格分裂：管理者和执行者。管理者负责做plan，制定TODO List，而执行者只需要像个没有感情的机器人去完成任务就行了。听起来很荒唐，可是如果想要尝试一下，有如下建议：</p>\n<ul>\n<li>管理者一定要制定足够详细的todo list，且尽量人性化</li>\n<li>执行者在执行的时候，尽量快乐的且不要携带个人情绪的去完成</li>\n</ul>\n<p>这个总结跑的优点偏了，只因为写到这里才突发此感。好了，继续搬砖了，下次有时间再聊。</p>\n","categories":["nlp"],"tags":[]},{"title":"如何快速做算法实验","url":"https://wj-mcat.github.io/2021/05/11/nlp/quick-experiment/","content":"<p>每个算法工程师都必须要有自己熟悉的一套code toolkit，包含各种不同的任务，开放不同模块的接口，能够快速复现出sota方法，同时最重要的是有一套完整的分析步骤流程，帮助解决类似于无法收敛、梯度消失爆炸等问题、模型输入输出等相关问题。</p>\n<span id=\"more\"></span>\n<h2 id=\"定义\">定义</h2>\n<p>做任何事情，提升效率是提升能力的关键，那对于算法工程师而言，快速实验一方面是工作和学习中的高效竞争力，另一方面能够帮助自己预留更多的时间来处理其他事情，比如分析数据、分析模型、从而做相关的模型消融实验等等，所以快速实验是一个非常必要的技能，也是长期工作和学习过程中必定要具备的一项技能。</p>\n<p>那怎么才算是快速实验呢？如果要在目前已有的任务上面跑，只需要<strong>简单改吧改吧</strong>就能够得出所有的实验结果。</p>\n<h2 id=\"要求\">要求</h2>\n<p><strong>简单改吧改吧</strong>听起来非常简单，里面有很多工作需要完成，比如说：</p>\n<ul>\n<li>针对于某一个任务的输入输出、数据处理、模型结构、训练、评估等模块都要非常熟悉。</li>\n<li>熟练使用某一个代码框架，如pytorch、paddle等，并整理一套属于自己的实验toolkit。</li>\n<li>将自己的代码框架open出去，和其他开发者共同维护工具库</li>\n<li>需要更多的时间和兴趣来维护，而且还特被重要</li>\n</ul>\n<p>这些要求简单也不简单：内容简单，可坚持不简单，同时用对的方法完成更加是难上加难。</p>\n<h2 id=\"总结\">总结</h2>\n<p>如果这个工作做好了，对自身和开源社区都是非常有价值的事情，可是这件事情很难。</p>\n<p>那为什么这么难呢？明明是一件很简单的事情，如果给一个没有感性的模拟机器人来完成，这就是一个easy case job：每天定点定时完成某些任务，按时保质的坚持，这对于个人而言极其重要。</p>\n<blockquote>\n<p>让我想起了电竞行业里面，每位选手都需要知道什么时候该做什么事情，什么时候不该做什么事情，思路非常清晰，一定要客观，尽量避免主观。可是很难，因为他们不是机器人，而是具有感情的人。</p>\n</blockquote>\n<p>我有时候在想，自己是否要来一点人格分裂：管理者和执行者。管理者负责做plan，制定TODO List，而执行者只需要像个没有感情的机器人去完成任务就行了。听起来很荒唐，可是如果想要尝试一下，有如下建议：</p>\n<ul>\n<li>管理者一定要制定足够详细的todo list，且尽量人性化</li>\n<li>执行者在执行的时候，尽量快乐的且不要携带个人情绪的去完成</li>\n</ul>\n<p>这个总结跑的优点偏了，只因为写到这里才突发此感。好了，继续搬砖了，下次有时间再聊。</p>\n","categories":["nlp"],"tags":[]},{"title":"干货铺","url":"https://wj-mcat.github.io/2021/05/08/overall/","content":"<p>收藏干货</p>\n<span id=\"more\"></span>\n<h1>NLP</h1>\n<h2 id=\"Papers\">Papers</h2>\n<ul>\n<li><a href=\"https://github.com/km1994/nlp_paper_study\">nlp-paper-study</a></li>\n<li><a href=\"https://docs.google.com/spreadsheets/d/1YfuUjrqCGLW0aq2l8QsCIOS0N1fwhtrTvyGI5EqUkMs/edit#gid=0\">few-shot papers</a></li>\n<li><a href=\"https://github.com/Duan-JM/awesome-papers-fewshot\">awesome-papers-fewshot</a></li>\n<li><a href=\"https://github.com/yizhen20133868/Awesome-SLU-Survey#few-shot-slu\">Awesome-SLU-Survey</a></li>\n</ul>\n","categories":[],"tags":[]},{"title":"Attention","url":"https://wj-mcat.github.io/2021/05/08/nlp/components/attention/","content":"<p>Attention在实际项目中的应用非常广泛。</p>\n<span id=\"more\"></span>\n","categories":["nlp","components"],"tags":["nlp"]},{"title":"few-shot papers","url":"https://wj-mcat.github.io/2021/05/07/nlp/papers/few-shot/","content":"<p>Few-Shot 在工业界落地非常吃香，很大原因在于让客户给你标注数据的代价太大，就算给你标，也很容易出现脏数据，此时few-shot就显得尤为重要。</p>\n<span id=\"more\"></span>\n<h1>介绍</h1>\n<h2 id=\"什么是Few-Shot\">什么是Few-Shot</h2>\n<p>Few-Shot learning(FSL)，在少量数据集（通常2个，5个左右）上进行预测的深度学习方法。</p>\n<p>目前的机器学习中，都是基于大量数据来训练模型，甚至流行一句话：数据多又好，模型才能好。可这个在现实工业落地场景中是一个不实际的场景，更多的都是少又脏的数据，而Few-Shot学习则主要是为了解决这样的问题。</p>\n<p>为什么few-shot能work且这么重要呢？</p>\n<ul>\n<li>像人类一样判断：few-shot 通过把query和support set进行对比，找到相似度最高的那个类别，这个过程和人类来判断一个新事物的方式是非常类似的，也容易理解。</li>\n<li>在少量数据集上学习：通过将query与提供的少量支撑集进行相似度对比计算，得到query的类别，这个过程能够基于非常少量的数据集上学习到一个很好的效果，这个对于实际工业落地来说，非常的重要。</li>\n<li>降低数据搜集和算力的消耗：由于数据集非常少，搜集起来就相对简单，同时计算也非常快，这也是对于工业界非常有益。</li>\n</ul>\n<h2 id=\"few-shot-VS-zero-shot\">few-shot VS zero-shot</h2>\n<h2 id=\"方法\">方法</h2>\n<ul>\n<li>Pretraing：基于某一个预训练模型来对输入进行编码，提取特征。</li>\n<li>fine-tuning: SoftMax Linear\n<ul>\n<li>用supoort set的向量平均数据作为初始值</li>\n<li>entropy regularization</li>\n<li>cosine similarity + Softmax Linear Classifier</li>\n</ul>\n</li>\n<li>few-shot prediction：根据一个query在support set中进行预测，一类support set中的特征将会取平均。</li>\n</ul>\n<h3 id=\"Entropy-Regularization\">Entropy Regularization</h3>\n<p>属于强化学习中的一个正则化方法。</p>\n<p>在正式讲解之前，需要预习一下Entropy基本概念：如果类别判断的信心分数很低（类别分数平均），则Entropy score很高；如果类别判断的信心分数很高（类别分数不平均，可以肯定是属于哪类），则Entropy score很低。</p>\n<blockquote>\n<p>信息熵本身就是描述一件事物的混乱程度，且始终趋于混乱程度更高的方向发展。</p>\n</blockquote>\n<p>作用：</p>\n<ul>\n<li>Improve Exploration</li>\n</ul>\n<p>提升模型的优化能力，避免local optimization。</p>\n<ul>\n<li>Fine-Tuning Policies</li>\n</ul>\n<p>在Fine-Tuning过程中，使用Entropy Regularization能够让模型优化更加具有探索性，避免过拟合，让模型总是有探索性的去优化全局参数。</p>\n<ul>\n<li>More Robustness</li>\n</ul>\n<p>由于模型在fine-tuning阶段更具有探索性，故模型能够避免局部优化，提升全局优化，提升模型的鲁棒性。</p>\n<blockquote>\n<p>参考论文：<a href=\"https://www.aclweb.org/anthology/2020.acl-main.615.pdf\">Generalized Entropy Regularization or: There’s Nothing Special about Label Smoothing</a></p>\n</blockquote>\n<h2 id=\"数据集\">数据集</h2>\n<ul>\n<li>Omnilglot：手下数字识别，类别很多，数据集非常小，很适合在学术界上学习测试</li>\n<li>Mini-ImageNet：100classes</li>\n</ul>\n<h2 id=\"孪生网络\">孪生网络</h2>\n<blockquote>\n<p>连体网络</p>\n</blockquote>\n<p>Encoder层级是一致的。</p>\n<p>训练数据是需要进行正负例样本。<br>\nLoss： Triple Loss</p>\n<p>One-Shot Prediction：最后只需要计算distance</p>\n<p>步骤：</p>\n<ul>\n<li>使用孪生网络在是大型数据集上做训练</li>\n<li>构造support-set\n<ul>\n<li>训练数据集是包含测试集中的类别</li>\n</ul>\n</li>\n<li>使用孪生网络来计算其相似度</li>\n</ul>\n<h2 id=\"技巧\">技巧</h2>\n<h1>论文列表</h1>\n<h2 id=\"2021\">2021</h2>\n<h3 id=\"PROTODA-EFFICIENT-TRANSFER-LEARNING-FOR-FEW-SHOT-INTENT-CLASSIFICATION\">PROTODA: EFFICIENT TRANSFER LEARNING FOR FEW-SHOT INTENT CLASSIFICATION</h3>\n<hr>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://blog.bitsrc.io/how-to-write-beautiful-and-meaningful-readme-md-for-your-next-project-897045e3f991\">How to Write Beautiful and Meaningful README.md</a></li>\n<li><a href=\"https://arxiv.org/abs/1904.04232\">A Closer Look at Few-shot Classification</a></li>\n<li><a href=\"https://arxiv.org/abs/1909.02729\">A Baseline for few-shot Image classification</a></li>\n<li><a href=\"https://arxiv.org/abs/2003.04390\">A New Meta-Baseline for Few-Shot Learning</a></li>\n</ul>\n","categories":["nlp","papers"],"tags":["nlp"]},{"title":"如何编写一个好的README","url":"https://wj-mcat.github.io/2021/05/01/skills/how-to-write-readme/","content":"<p>作为一个优秀的开源项目推广者。</p>\n<span id=\"more\"></span>\n<hr>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://blog.bitsrc.io/how-to-write-beautiful-and-meaningful-readme-md-for-your-next-project-897045e3f991\">How to Write Beautiful and Meaningful README.md</a></li>\n</ul>\n","categories":["skills"],"tags":[]},{"title":"Technical Writer","url":"https://wj-mcat.github.io/2021/05/01/skills/technical-writer/","content":"<p>俗称，技术写手；融合写作技巧和沟通技巧，将复杂技术问题逐步拆解成容易理解的系列文档，这在企业级互联网公司中显得尤为重要，一个好的技术文档系统，能够帮助客户更快理解业务，上手工具使用，从而提升产品整体使用体验。</p>\n<p>对于热爱分享的Programmer来说，这是散播影响力的重要方式，所以学习如何做一个好的<code>Technical Writer</code>对于技术人员生涯来说，是一个非常不错的选择。</p>\n<span id=\"more\"></span>\n<p>在这篇文章中，我将大家介绍：什么是Technical Writer？如何成为一个Technical Writer？</p>\n<hr>\n<h2 id=\"什么是Technical-Writer\">什么是Technical Writer</h2>\n<h3 id=\"概念\">概念</h3>\n<p>Technical Writer 是一个专业的活，负责简化复杂的技术系统，所以具体要做什么呢？</p>\n<ul>\n<li>系统介绍手册：比如：Rasa</li>\n<li>用户手册，比如：开源项目技术文档</li>\n<li>期刊文章，比如：知乎博文</li>\n<li>快速参考指南，比如：Quick Start</li>\n<li>白皮书，这个就比较复杂</li>\n</ul>\n<p>对于技术人员来说，会为开源项目编写用户手册，期刊文章等，放开发者能够从多方面了解该项目的细节，从而快速上手，提高该项目的知名度（例如：Github star），此时会给自己一个正向的反馈，从而更有信心来继续完善该项目。这个也是快速积攒人气，宣传自己的方式。</p>\n<h3 id=\"Technical-Writer-的目的\">Technical Writer 的目的</h3>\n<p>相信所有的技术人员都想成为大佬，这个必须依赖你的能力。尤雨溪在<a href=\"https://www.zhihu.com/question/456527668/answer/1858291784\">《怎么才能有尤雨溪一半强，该怎么学习？》</a>中的回答提到，其实强并没有很明确的分界线，可是在大众眼光中看来，强可由在影响力体现，而编写优秀的技术博客就是一个产生影响力的方式。</p>\n<p>不过回过头来，我们并不能抱着产生影响力的初衷来写技术博客，而是抱着钻研技术的态度来编写每一篇博客，这样才能让自己对每一个问题都有独特的见解，从而逐步提升自己的能力。</p>\n<h2 id=\"一定要成为Technical-Writer\">一定要成为Technical Writer</h2>\n<h3 id=\"最好的学习方法\">最好的学习方法</h3>\n<p>相信很多技术人员都在感叹，日新月异的技术根本学不完，这个月出的技术下个月就被颠覆了，如果过了三十该何去何从。可这是由于对技术不热爱，技术也是艺术的一种，而且这种艺术还能够改变世界，是一件非常酷的事情。纵观国外的技术氛围，有很多白发苍苍的技术大佬在各种论坛上分享这段时间工作的成果，我们也都在钦佩他们的之外在感叹30岁的危机。</p>\n<p>发布高质量博客获得知名度，而知名度是继续学习发布博客最大的动力，良心循环是学习最好的现象。如果你是一个技术人员，快去尝试通过博客提升技术底蕴和知名度吧，相信你不会后悔。</p>\n<h3 id=\"行动力\">行动力</h3>\n<p>有很多小伙伴，一开始说要学着写博客，可是很多都会卡在博客的搭建这个环节。会纠结到底是发布到哪个平台上比较合适，用什么主题比较合适，写博客的时间规划是多久比价合适等一系列的问题，曾经的我也被这些问题所困扰，迟迟没有开始。或许这都是需要有一个过程吧。</p>\n<p>当你想要实现某个想法的时候，此时此刻是最好的开始，一定不要delay到某个特殊时期，大数据告诉我们，这很可能会夭折，行动力就是当你有某个想法时，just do it.</p>\n<h3 id=\"可能性\">可能性</h3>\n<p>技术人员只做技术并不是一个好的方向，因为这样以后就只能做技术。技术人员以后可以有很多发展方向，比如技术管理层、架构师、咨询师以及资深技术人员，甚至在生涯当中有机会编写一本技术书籍，而这些方向一切的基础都是拥有足够的技术底蕴以及了解新技术现状。</p>\n<p>而技术博客能够让技术人员探索当前热门技术的底层原理，结合自己的经验来剖析技术原理，让开发者能够从多个维度理解相关技术，这些都是能够给自己积攒知名度，对于以后找工作，公司提升基于来说都是一个非常不错的指标。坚持做好技术分享能够拓宽技术路线，给自己多个选择，消解国内的30岁危机。</p>\n<p>所以啊，坚持初衷，坚持写技术分享博客可以拓宽技术人员未来可能性，让未来的我们走的更加悠然。</p>\n<h3 id=\"自制力\">自制力</h3>\n<p>坚持 意见事情真的挺难的，至少对于普通人来说是这个样子。</p>\n<p>相信有很多小伙伴都存在这样的苦恼，曾经制定过无数计划，都被遗忘在某个角落，等尝试过失败后却后悔莫及，为什么当初没有坚持下来。</p>\n<p>我不想再这个样子了，管理好自己的时间，充分利用好一分一秒，做自己不会后悔的事情。我想，这件事情能够坚持下来，那什么事情我不能坚持下来呢？</p>\n<hr>\n<h2 id=\"如何成为一个Technical-Writer？\">如何成为一个Technical Writer？</h2>\n<p>之前跟一个出版过书籍的朋友聊过，如何写技术博客？他只给我说了一句话：先别管写的如何，写出来就是最大的成就。</p>\n<p>所以，要成为一个优秀的Technical Writer，首先第一个就是要成为一个Writer，无论是不是优秀的。这也是为什么，我想要开始写，不想被周边琐碎的事情拖延开始的时间。</p>\n<blockquote>\n<p>写就完事了</p>\n</blockquote>\n<h3 id=\"系统性\">系统性</h3>\n<p>写文章和学习类似，都需要系统性。</p>\n<p>如果你要开始写文章，我相信你肯定是写学习过程中的感悟，技术经验，而这些我相信都是应该高内聚的：在某一个领域内。如果能够在某个领域内坚持写下去，我相信未来的文章肯定会越来愈深入，逐步达到专家级的水平，而这个往往是与自己的实力相匹配。</p>\n<p>学习要有系统性，写文章也需要系统性，让自己专注在某个领域内，不断的探索其中的难题，分享解决方案。</p>\n<h3 id=\"少点拘束\">少点拘束</h3>\n<p>不同阶段拥有不同的表现，在写作上也是如此。</p>\n<p>刚开始写博文，写出来便是最大的进步，其后不断的积累，经验会促使自己调整其结构以及叙述的方式，从而提升技术博文的可阅读性。</p>\n<p>写作是一个螺旋式上升的过程，不要太在意当下写的不好，而是要在意当下哪里写的不好，从而可以调整，这样才能解决主要矛盾，提升自我。</p>\n<h3 id=\"博文不是一蹴而就\">博文不是一蹴而就</h3>\n<p>在工作和学习过程中，对于某个知识点的理解会不断纠错和加深的过程。</p>\n<p>我把博文当成自己的知识库，是一个不断更新的过程。比如我对Bert的理解会随着学习和工作加深对其的理解，于是回头来重新调整内容，加深对应知识点的理解。</p>\n<p>这是一个良性循环的过程，是一个系统性的活儿，是一个长期的活儿，需要坚持下来才会有爆发式的效益增长。</p>\n<h2 id=\"给自己的话\">给自己的话</h2>\n<p>路走了很多遍，很多条，可是我一直在纠结哪一条是最好的。</p>\n<p>其实选择一条路，坚定的走下去，这条路肯定是最好的路。</p>\n","categories":["skills"],"tags":[]},{"title":"模型蒸馏","url":"https://wj-mcat.github.io/2021/04/30/nlp/distillation/","content":"<p>模型蒸馏旨在在不影响模型性能的基础上，减模型参数量，减少部署的压力。</p>\n<blockquote>\n<p>类似于用一个更小的模型来学习大模型中的知识点。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1>介绍</h1>\n<h2 id=\"名词解释\">名词解释</h2>\n<ul>\n<li>teacher -&gt; 原始模型或模型ensemble</li>\n<li>student -&gt; 蒸馏得到的模型</li>\n<li>transfer set -&gt; 用来迁移teacher知识、训练student的数据集合</li>\n<li>soft target -&gt; teacher输出的预测结果（一般是softmax之后的概率）</li>\n<li>hard target -&gt; 样本原本的标签</li>\n<li>temperature -&gt; 蒸馏目标函数中的超参数</li>\n<li>born-again network -&gt; 蒸馏的一种，指student和teacher的结构和尺寸完全一样</li>\n<li>teacher annealing -&gt; 防止student的表现被teacher限制，在蒸馏时逐渐减少soft targets的权重</li>\n</ul>\n<h2 id=\"\"></h2>\n<hr>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/71986772\">深度神经网络模型蒸馏Distillation</a></li>\n</ul>\n","categories":["nlp"],"tags":["nlp"]},{"title":"pre-commit 工具","url":"https://wj-mcat.github.io/2021/04/29/python/pre-commit/","content":"<p>现在DevOps已然成为项目开发过程中的必备环节，尤其是开源项目，由来自全球的开发者共同维护一个项目，此时严格且规范的代码审查与自动化部署至关重要。而pre-commit工具能够帮助你更好的完成这个工作。</p>\n<p>pre-commit能够在git命令不同阶段添加自定义脚本，从而完成代码审查、日志记录、自动更新版本号以及自动部署文档系统等常见功能，此篇文章将要介绍pre-commit在<a href=\"https://github.com/wechaty/python-wechaty\">python-wechaty</a>开源项目中的实战小技巧。</p>\n<span id=\"more\"></span>\n<h2 id=\"一、快速上手\">一、快速上手</h2>\n<h3 id=\"1-1-安装工具\">1.1 安装工具</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> pre-commit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>别看是使用python来安装工具，可是在任何编程语言上都是通用的。</p>\n</blockquote>\n<p>安装完成之后即可查看对应工具的版本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ pre-commit <span class=\"token parameter variable\">--version</span>\npre-commit <span class=\"token number\">2.12</span>.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"1-2-安装hook脚本\">1.2 安装hook脚本</h3>\n<p>hook是什么？hook原意钩子，是在git提交之前，提交之后执行的脚本，能够进行代码审查，撤销提交操作等，也是这个工具的核心脚本。</p>\n<p>安装的脚本如下所示：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pre-commit <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"1-3-配置文件\">1.3 配置文件</h3>\n<p>当开发者在push代码之前，需要对进行审查，或者push成功之后，在自动更新项目版本文件（VERSION），此类定制化的任务是需要通过配置文件来完成。</p>\n<p>配置文件能够在不同分支和git操作阶段执行自定义任务脚本，完成自定义的代码审查。添加配置文件有多种方式：</p>\n<ul>\n<li>手动添加一个文件：<code>.pre-commit-config.yaml</code></li>\n<li>通过命令行创建一个模板配置文件：<code>pre-commit sample-config</code></li>\n</ul>\n<p>设定一个场景，要在项目本地代码提交之前进行代码审查，其配置文件如下所示：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># the hook execution directory in under git root directory</span>\n<span class=\"token key atrule\">repos</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> local\n  <span class=\"token key atrule\">hooks</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> pylint\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pylint\n    <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Pylint: Checks for errors in Python code\"</span>\n    <span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> python\n    <span class=\"token key atrule\">entry</span><span class=\"token punctuation\">:</span> pylint ./src\n    <span class=\"token key atrule\">always_run</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">verbose</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">require_serial</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n    <span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>push<span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">types</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"1-4-参数说明\">1.4 参数说明</h3>\n<ul>\n<li>\n<p>repos<br>\n通过属性名即可得知，此配置文件可对多个repo配置hook，在上述配置当中我只对本地单个repo进行了配置。</p>\n<p>注意，其中的repo名为：local。</p>\n</li>\n<li>\n<p>hooks<br>\n在每个项目当中，可以配置多个hooks任务，从而实现定制化的操作。同样，hooks也是一个列表属性。</p>\n</li>\n<li>\n<p>id/name/description/language/<br>\n此类属性是单个hook任务的描述信息。</p>\n</li>\n<li>\n<p>entry<br>\n这个就是该hook任务的自定义Bash脚本，大家可以在此处编写逻辑较为复杂的代码审查，也可以将复杂的脚本通过外部脚本文件来执行。这部分就是通过程序员自行扩展。</p>\n</li>\n<li>\n<p>verbose<br>\n是否在控制台中打印日志记录，这个通常会设置成True。</p>\n</li>\n<li>\n<p>require_serial<br>\n是否在一个进程当中执行该任务：通常情况下不同任务都是隔离的，没有依赖关系，如果审查的耗时较长，则可以设置为<code>False</code>加快其执行的速度。</p>\n</li>\n<li>\n<p>stages<br>\n当代码在提交时，会触发<code>commit</code>、<code>commit</code>,<code>merge-commit</code>, <code>push</code>, <code>prepare-commit-msg</code>, <code>commit-msg</code>, <code>post-checkout</code>, <code>post-commit</code>, <code>post-merge</code>, or <code>manual</code>，通常情况下使用<code>push</code>即可。</p>\n</li>\n<li>\n<p>types<br>\npre-commit 工具会在不同类型的文件上制定对应的文件，</p>\n</li>\n</ul>\n","categories":["python"],"tags":["python"]},{"title":"关于Bert的一切","url":"https://wj-mcat.github.io/2021/04/28/nlp/pretrained-language-model/bert/","content":"<p>作为NLP领域里程碑式的作品，对于其深刻的理解是很多后续学习工作的基础，更是面试找工作的利器。</p>\n<span id=\"more\"></span>\n<h1>介绍</h1>\n<p><img src=\"/images/2021.05/bert.png\" alt=\"upload successful\"></p>\n<p><code>Bert</code> (<strong>B</strong>idirectional <strong>E</strong>ncoder <strong>R</strong>epresentations from <strong>T</strong>ransformers) 是由谷歌AI NLP团队提出：<a href=\"https://arxiv.org/abs/1810.04805\">《BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding》</a>，是第一个无监督双向语言模型，一经发表就刷新了各大榜单，被定义为里程碑式的模型，让NLP达到了新的高度。</p>\n<p><code>Bert</code>是一个基于海量无结构化文本进行深度双向语义建模的预训练模型，通过<code>Mask Language Model</code>和<code>Next Sentence Prediction</code>两种训练任务，学习到文本中丰富的先验知识。实践证明，这些通用先验知识能够应用于各种下游任务，并取得<code>SOTA</code>效果，即使是在<code>low-resource</code>下也能够取得良好的效果。</p>\n<h2 id=\"解决了什么问题\">解决了什么问题</h2>\n<p>模型参数数量这么大，必然需要海量的训练语料。从哪里收集这些海量的训练语料？《A Neural Probabilistic Language Model》这篇论文说，每一篇文章，天生是训练语料。难道不需要人工标注吗？回答，不需要。</p>\n<h2 id=\"为什么这么强\">为什么这么强</h2>\n<p>原因有三：</p>\n<ul>\n<li>双向建模</li>\n<li>使用MLM和NSP两种训练技巧</li>\n<li>能够学习到Context-Heavy的Representation</li>\n</ul>\n<p>用一句话来说就是：使用MLM和NSP两种训练技巧，基于双向建模能够学习到丰富上下文Representation。</p>\n<h2 id=\"整体结构\">整体结构</h2>\n<p>基于Transformer构建模型，bert-base模型当中参数为：L=12, H=768, A=12，参数数量为110M；Bert-Large模型中参数为：L=24, H=1024, A=16，参数数量为：340M。</p>\n<p><img src=\"/images/2021.05/bert-overall.png\" alt=\"bert-overall\"></p>\n<blockquote>\n<p>Bert其实是分为Encoder和Decoder两个部分，如果只是为了了解Bert是如何工作的，那只需要了解Encoder部分即可。</p>\n</blockquote>\n<p>是由12层的双向Transformer构成，能够进行不同层面的特征抽取，那为了深入到Bert中的细节，那接下来将要介绍一下Bert的细节。</p>\n<h2 id=\"Transformer\">Transformer</h2>\n<p>Transformer是一个基于Attension机制的NLP基础组件，出自于《Attention is All you need》，OpenAI GPT和BERT都是基于Transformer。</p>\n<p>下面我将以数据的流向为线索，来介绍模型中的细节。</p>\n<h3 id=\"问题定义\">问题定义</h3>\n<p>最初Transformer被用来解决翻译的问题，那此时就要求其具备：</p>\n<ul>\n<li>能够步骤输入文本中词与词之间的关系</li>\n<li>能够将以上关系映射到输出文本中</li>\n</ul>\n<p>此时就需要一个Encoder和Decoder来处理这两个问题，结构如下：</p>\n<p><img src=\"/images/2021.05/transformer.png\" alt=\"transformer\"></p>\n<h3 id=\"数据的流向\">数据的流向</h3>\n<p>简化后的结构图如下所示：</p>\n<p><img src=\"/images/2021.05/transformer-data-flow.png\" alt=\"transformer\"></p>\n<blockquote>\n<p>左边Encoder的输入为input sentence，右边Decoder的输入为target sentence，这两者用来做相关相似度计算。</p>\n</blockquote>\n<ol>\n<li>在原始论文中，N为6.</li>\n<li>input sentence每一个单词为token，所以一个输入文本可编码为：<code>input_length</code> * <code>embedding_dim</code></li>\n<li>添加位置信息(positional information)，维度大小同上：<code>input_length</code> * <code>embedding_dim</code></li>\n<li>数据经过N个Encoder之后的输出为：<code>input_length</code> * <code>embedding_dim</code>，数据的原始大小并没有变化</li>\n<li>target sentence进行分词和添加位置信息之后，便输入到Decoder当中，大小为：<code>target_length</code> * <code>embedding_dim</code></li>\n<li>Decoder中的每一层都要使用Encoder的输入，整体输出大小为：<code>target_length</code> * <code>embedding_dim</code></li>\n<li>最后连接一个Linear层，然后其输出大小为：<code>target_length</code> * <code>vocab_size</code></li>\n</ol>\n<p>以上便是Transformer中的数据流向过程，那接下来我将介绍每一个细节。</p>\n<h3 id=\"输入表示\">输入表示</h3>\n<p>input sentence 和 target sentence 都是需要进行编码，最终得到一个<code>input_length</code> * <code>embedding_dim</code>向量，那这是如何得到文本的向量表示的呢？</p>\n<p>主要分为两个步骤：</p>\n<ul>\n<li>Token Embedding</li>\n<li>Encoding of Positions</li>\n</ul>\n<p>原始文本和目标文本的编码过程是一致的。Token Embedding的原理我就不介绍了，与通用的方法一致，Encoding of Positions的原理可用以下公式来表示：</p>\n<h3 id=\"Encoder-Layer\">Encoder Layer</h3>\n<p><img src=\"/images/2021.05/transformer-encoder-layer.png\" alt=\"transformer\"></p>\n<p>其中N个Layer链式连接，上一个的输出就是下一个的输入（而且输入和输出的维度大小一致），通过层级连接，能够捕捉到不同层次之间的上下文关系，这个过程也可以认为是sentence-level并非word-level的建模。</p>\n<h4 id=\"Multi-Header-Layer\">Multi-Header Layer</h4>\n<p><img src=\"/images/2021.05/transformer-multi-head.png\" alt=\"transformer\"></p>\n<p>内部有h个Dot-Product Attention连接：多个独立可学习的参数的特征空间，提升某一层的宽度，提取更多的特征空间。</p>\n<blockquote>\n<p>有研究表明，深的网络比宽的网络效果更好。而Bert无论你是宽度还是深度都比较适中，或许这就是理想情况下的结构。</p>\n</blockquote>\n<ul>\n<li>multi-head：提取特征的数量</li>\n<li>N-Transformer：提取复杂的特征</li>\n</ul>\n<p>核心公式如下所示：</p>\n<p><img src=\"/images/2021.05/transformer-math-multi-head.png\" alt=\"transformer\"><br>\n<img src=\"/images/2021.05/transformer-match-dot-product.png\" alt=\"transformer-match-dot-product\"><br>\n<img src=\"/images/2021.05/transformer-attention.png\" alt=\"attention math\"></p>\n<blockquote>\n<p>QK^t 的结果大小是:(input_length * input_length)</p>\n</blockquote>\n<p><strong>可以将Attention看作是给sentence中不同token之间建模相似度关系</strong></p>\n<ul>\n<li>QK都是input通过不同的权重矩阵映射而来，最后通过dot-product计算映射的相似性，并最终得到一个token-level上的相似度。</li>\n<li>d_k 是放缩因子，能够减少不同维度大小带来的影响。</li>\n</ul>\n<h4 id=\"SEP-token\">[SEP] token</h4>\n<p>Bert 其实是可以应用于多种下有任务当中，其中有一个应用场景就是需要对两段文本进行编码，比如Question Answer任务当中就需要将两个句子拼接到一起，然后塞入到Bert当中编码。那对两个句子进行语义层面的分割便成为了一个问题。</p>\n<p>于是就引入了[SEP]标签：在每一个文本的末尾都添加一个[SEP]标签来分割两端，从而让模型</p>\n<h4 id=\"Dropout-Add-Norm\">Dropout, Add &amp; Norm</h4>\n<p>MultiHead 结构的输出是: (input_length, embedding_dim)，接着将会有Dropout、残差网络已经正则化的处理过程，两处的Dropout都是0.1。</p>\n<p>SubLayer：FeedForward、Multi-Head。整体公式为：x + Dropout(Sublayer(x))。</p>\n<p>接着会有一个token-wise/row-wise级别的正则化来保证该层数据的稳定性，以此来保证参数学习的范围不要太偏。</p>\n<p><img src=\"/images/2021.05/transformer-layer.png\" alt=\"upload successful\"></p>\n<h4 id=\"理解MultiHead\">理解MultiHead</h4>\n<p>整体理解：Token Representation + Token Relationship Representation。</p>\n<p>换句话说：保留原始token的语义，理解强相关的词与词之间的关系。</p>\n<h4 id=\"总结\">总结</h4>\n<ul>\n<li>Bert仅仅是使用了Transformer中的Encoder。</li>\n<li>由于每一层的输入和输出维度大小一致，故是可以使用链式连接建模。</li>\n</ul>\n<h2 id=\"训练方法\">训练方法</h2>\n<p>Bert是双向自编码语言模型，训练阶段使用了两种方法：Mask Language Model 以及 Next Sentence Prediction。前者主要是为了学习一个丰富的上下文信息，后者为部分下游任务设计（如QA、NLI等任务），目的是建模句子与句子之间的联系。</p>\n<h2 id=\"一堆问题\">一堆问题</h2>\n<h3 id=\"Self-Attention-is-BiDirectional\">Self-Attention is BiDirectional</h3>\n<blockquote>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://github.com/google-research/bert/issues/83\">The feature of bidirection</a></li>\n<li><a href=\"https://github.com/google-research/bert/issues/319#issuecomment-466844140\">how the model reflect ‘bidirectional’?</a></li>\n</ul>\n</blockquote>\n<ul>\n<li>Bert是双向模型，基于Transformer Encoder中的 Bidirectional Self-Attention。\n<ul>\n<li>Self-Attention 可以获取left-tokens 和 right-tokens，所以被称为是bidirectional。</li>\n</ul>\n</li>\n<li>GPT 是单向模型，基于Transformer Decoder，仅仅是将每一个是token都添加为输入，并生成对应的输出。\n<ul>\n<li>只能够将left-tokens添加到输入当中，输出预测tokens，故称之为unidirectional。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"为什么-CLS-能作为整个文本的表示\">为什么 [CLS] 能作为整个文本的表示</h3>\n<blockquote>\n<p>参考: <a href=\"https://github.com/google-research/bert/issues/319#issuecomment-522072295\">why is cls learning the sentence representation?</a></p>\n</blockquote>\n<p>Bert的输入中，每一个文本开头都会插入一个[CLS]标签，在文本分类的过程中会使用这个位置的标签来作为整个sentence的representation，实践证明效果是非常好的，可是为什么呢？</p>\n<ol>\n<li>这个要从Self-Attention说起。Self-Attention中的每一个tokne都可以获得整个sentence的tokens表示，也就是全局的含义表示。而[CLS]虽然是在文本的第一个位置，可是依然不影响能够获得全局的编码。</li>\n<li>选择固定位置的token和指定位置的token表示，其实效果差别挺大的。比如在文本中：<code>the cat in the hat</code>和<code>i like the cat</code>中的<code>the</code>表示的含义是不一致的，而且位置信息也不一致的，没有办法通过指定的token来表示整个sentence。所以选择一个固定位置的token来作为sentence的表示显得尤为重要。</li>\n<li>[CLS]标签在第一层Transformer中只是一个初始化的token embedding表示，可是在Self-Attention的加持下，在每一层Transformer迭代的时候，都能够添加获不同层面的all token 编码信息，所以在最后一层的时候是有丰富的sentence-level信息编码。</li>\n</ol>\n<h2 id=\"总结-2\">总结</h2>\n<ul>\n<li>[MASK]标记在实际预测中不会出现，训练时用过多[MASK]影响模型表现</li>\n<li>每个batch只有15%的token被预测，所以BERT收敛得比left-to-right模型要慢（它们会预测每个token）</li>\n</ul>\n<h1>衍生模型</h1>\n<h2 id=\"RoBERTa\">RoBERTa</h2>\n<h2 id=\"XLNet\">XLNet</h2>\n<h2 id=\"AlBERTa\">AlBERTa</h2>\n<h2 id=\"FastBert\">FastBert</h2>\n<p>权重共享的BERT。</p>\n<hr>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://medium.com/@mromerocalvo/dissecting-bert-part1-6dcf5360b07f\">introduction-for-bert-part-1</a></li>\n<li><a href=\"https://medium.com/dissecting-bert/dissecting-bert-part2-335ff2ed9c73\">introduction-for-bert-part-2</a></li>\n<li><a href=\"https://towardsdatascience.com/intuitive-explanation-of-bert-bidirectional-transformers-for-nlp-cdc1efc69c1e\">Intuitive Explanation of BERT- Bidirectional Transformers for NLP</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/46652512\">知识点扩展</a></li>\n</ul>\n","categories":["nlp","pretrained-language-model"],"tags":["nlp","bert"]},{"title":"categories","url":"https://wj-mcat.github.io/categories/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"https://wj-mcat.github.io/about/index.html","content":"<p>Hello, developers.</p>\n<p>I’m 吴京京 👨‍💻, author of <a href=\"https://github.com/wechaty/python-wechaty\">python-wechaty</a>, artificial intelligence master of <a href=\"https://www.bupt.edu.cn/\">BUPT</a>, great passion about Chatbot, <a href=\"https://wj-mcat.github.io/\">blogs</a>.</p>\n<ul>\n<li>前百度文心一言算法工程师，现冲在一线做 Agent 算法，做端到端优化。</li>\n<li>曾经热爱开源，现激情退散，不过也期待一个全面拥抱开源的机会。</li>\n<li>关注 Agent 相关产品形态，时刻保持着对产品和技术的敏感度。</li>\n</ul>\n<p>🎃 🎃 Latest activites:</p>\n<ul>\n<li>📄 writing documentation system of <a href=\"https://python-wechaty.readthedocs.io/\">python-wechaty</a></li>\n<li>👐 give more energy on <a href=\"https://github.com/wechaty/wechaty\">wechaty</a></li>\n<li>🦈 …</li>\n</ul>\n<p>Talks:</p>\n<ul>\n<li>2022.05.31 <a href=\"https://www.huodongxing.com/event/5650422598323\">AntigenBot: 小区抗疫AI 机器人项目 in Garage Talks of Microsfot</a></li>\n<li>2022.05.29 <a href=\"https://www.huodongxing.com/event/5650422598323\">AntigenBot: 小区抗疫AI</a></li>\n<li>2021.10.30 <a href=\"https://www.bilibili.com/video/BV1YF411a77L?spm_id_from=333.999.0.0\">COSCon 2021 人工智能分论坛：聊一聊python-wechaty和paddlepaddle的有趣应用</a></li>\n<li>2021.10.16-17 <a href=\"https://cn.pycon.org/2021\">PyCon 2021 Python Wechaty: Conversational RPA SDK</a></li>\n<li>2021.4.14 <a href=\"https://www.bilibili.com/video/BV16U4y1h7dc\">几行代码带你打造专属的AI ChatBot</a></li>\n<li>2020.11.21 <a href=\"https://ng-china.org/#speakers\">基于机器学习的聊天机器人</a></li>\n<li>2020.11.14 <a href=\"https://wx.vzan.com/live/tvchat-425619793#/\">开源教育：2:41:24 Multi-Wechaty SDK for Chatbot</a></li>\n<li>2020.10.24 <a href=\"https://segmentfault.com/area/coscon-2020\">2020 中国开源年会暨阿帕奇中国路演 - 人工智能OSS + AI | 分会场 - Multi：适合聊天机器人的Wechaty SDK</a></li>\n</ul>\n<p><a href=\"https://github.com/wj-Mcat\"><img src=\"https://github-readme-stats.vercel.app/api?username=wj-Mcat\" alt=\"wj-Mcat's github stats\"></a></p>\n","categories":[],"tags":[]},{"title":"projects","url":"https://wj-mcat.github.io/projects/index.html","content":"","categories":[],"tags":[]},{"title":"tags","url":"https://wj-mcat.github.io/tags/index.html","content":"","categories":[],"tags":[]}]